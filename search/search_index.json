{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Deepworks Core GitHub Repository","text":"<p>This repository contains a collection of reusable GitHub Actions workflows. These workflows are designed to standardize common CI/CD tasks across Deepworks repositories.</p>"},{"location":"#available-workflows","title":"Available Workflows","text":""},{"location":"#mkdocs-github-pages-workflow","title":"MkDocs GitHub Pages Workflow","text":"<p>View Documentation</p> <p>Automates the deployment of MkDocs documentation to GitHub Pages. This workflow:</p> <ul> <li>Copies repository files (README, CHANGELOG, LICENSE) to documentation</li> <li>Updates MkDocs navigation configuration</li> <li>Deploys to GitHub Pages</li> <li>Supports custom Python versions and file locations</li> </ul>"},{"location":"#create-github-release","title":"Create GitHub Release","text":"<p>View Documentation</p> <p>Automates the creation of GitHub releases. This workflow:</p> <ul> <li>Creates releases from version tags</li> <li>Supports prereleases and draft releases</li> <li>Allows custom release titles</li> <li>Can be triggered manually or by tags</li> </ul>"},{"location":"#update-changelog","title":"Update Changelog","text":"<p>View Documentation</p> <p>Automatically updates CHANGELOG.md when pull requests are merged. This workflow:</p> <ul> <li>Adds PR information to changelog</li> <li>Manages unreleased section</li> <li>Maintains consistent changelog format</li> <li>Runs on PR merge to develop branch</li> </ul>"},{"location":"#using-these-workflows","title":"Using These Workflows","text":"<p>To use these workflows in your repository:</p> <ol> <li> <p>Reference them in your workflow files:</p> <pre><code>jobs:\ndocs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre> </li> <li> <p>Configure with input parameters:</p> <pre><code>with:\nparameter: value\n</code></pre> </li> <li> <p>Provide any required secrets:</p> <pre><code>secrets:\ntoken: ${{ secrets.GITHUB_TOKEN }}\n</code></pre> </li> </ol>"},{"location":"#best-practices","title":"Best Practices","text":"<p>When using these workflows:</p> <ol> <li>Always reference a specific tag/SHA instead of <code>main</code> for production use</li> <li>Test workflow changes in a feature branch first</li> <li>Monitor workflow runs for any issues</li> <li>Keep repository settings up to date with required permissions</li> </ol>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>Check individual workflow documentation for detailed configuration options</li> <li>Review workflow run logs for troubleshooting</li> <li>Open an issue if you encounter any problems</li> <li>Submit pull requests for improvements</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol> <p>See our Contributing Guidelines for more information.</p>"},{"location":"getting-started/","title":"Getting Started with Deepworks Actions","text":"<p>This guide will help you understand and implement Deepworks GitHub Actions workflows in your repositories.</p>"},{"location":"getting-started/#overview","title":"Overview","text":"<p>Deepworks Actions provide a suite of reusable workflows for:</p> <ul> <li>Documentation management with MkDocs</li> <li>Release management and versioning</li> <li>Changelog automation</li> <li>Repository standardization</li> </ul>"},{"location":"getting-started/#core-workflows","title":"Core Workflows","text":""},{"location":"getting-started/#mkdocs-github-pages","title":"MkDocs GitHub Pages","text":"<p>Handles documentation deployment:</p> <pre><code>name: Documentation\njobs:\n  docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre>"},{"location":"getting-started/#release-management","title":"Release Management","text":"<p>Manages releases and versioning:</p> <pre><code>name: Release\njobs:\n  release:\n    uses: deepworks-net/github.actions/.github/workflows/release-drafter.yml@main\n</code></pre>"},{"location":"getting-started/#changelog-updates","title":"Changelog Updates","text":"<p>Automates changelog maintenance:</p> <pre><code>name: Changelog\njobs:\n  changelog:\n    uses: deepworks-net/github.actions/.github/workflows/update-changelog.yml@main\n</code></pre>"},{"location":"getting-started/#workflow-integration-map","title":"Workflow Integration Map","text":"<pre><code>graph TD\n    A[New PR] --&gt; B{Merged to Develop}\n    B --&gt; C[Update Changelog]\n    B --&gt; D[Update Draft Release]\n    C --&gt; E[Prepare Release]\n    D --&gt; E\n    E --&gt; F[Create Release PR]\n    F --&gt; G[Merge to Main]\n    G --&gt; H[Publish Release]</code></pre>"},{"location":"getting-started/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Repository Configuration</li> </ol> <pre><code># .github/workflows/docs.yml\nname: Documentation\non:\n  push:\n    branches:\n      - main\n\njobs:\n  docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre> <ol> <li>Required Files</li> <li><code>mkdocs.yml</code> for documentation</li> <li><code>CHANGELOG.md</code> for release notes</li> <li> <p><code>.github/release-drafter.yml</code> for release configuration</p> </li> <li> <p>Repository Settings</p> </li> <li>Enable GitHub Pages</li> <li>Set appropriate branch protections</li> <li>Configure required status checks</li> </ol>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#documentation-updates","title":"Documentation Updates","text":"<ol> <li>Make changes to docs</li> <li>Push to main</li> <li>Workflow automatically deploys</li> </ol>"},{"location":"getting-started/#release-process","title":"Release Process","text":"<ol> <li>Create changes in feature branch</li> <li>Merge PR to develop</li> <li>Changelog updates automatically</li> <li>Draft release updates</li> <li>Prepare release when ready</li> <li>Merge release PR</li> <li>Final release publishes</li> </ol>"},{"location":"getting-started/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/#custom-mkdocs-settings","title":"Custom MkDocs Settings","text":"<pre><code>jobs:\n  docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n    with:\n      python-version: '3.11'\n      requirements-file: 'docs/requirements.txt'\n</code></pre>"},{"location":"getting-started/#release-configuration","title":"Release Configuration","text":"<pre><code>jobs:\n  release:\n    uses: deepworks-net/github.actions/.github/workflows/release-drafter.yml@main\n    with:\n      tag-name: 'v1.0.0'\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Review the Release Process Guide</li> <li>Check Configuration Guide</li> <li>See Development Guide</li> <li>Browse Examples</li> </ul>"},{"location":"getting-started/#common-issues","title":"Common Issues","text":"<ol> <li>Documentation Not Deploying</li> <li>Check GitHub Pages settings</li> <li>Verify mkdocs.yml configuration</li> <li> <p>Review workflow permissions</p> </li> <li> <p>Release Draft Not Updating</p> </li> <li>Check release-drafter.yml configuration</li> <li>Verify branch names</li> <li> <p>Review GitHub token permissions</p> </li> <li> <p>Changelog Not Updating</p> </li> <li>Ensure PR merged to correct branch</li> <li>Check file paths</li> <li>Verify workflow permissions</li> </ol>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<ul> <li>Open an issue on GitHub</li> <li>Check existing documentation</li> <li>Review workflow run logs</li> </ul>"},{"location":"meta-level/","title":"Meta-Level Documentation: Git Development and Deployment Workflows","text":""},{"location":"meta-level/#overview","title":"Overview","text":"<p>This document provides a meta-level analysis of the Git-based development and deployment workflows used in the repository. The goal is to align these workflows conceptually and technically while identifying gaps and ensuring consistency.</p>"},{"location":"meta-level/#core-workflows","title":"Core Workflows","text":""},{"location":"meta-level/#1-development-workflow","title":"1. Development Workflow","text":""},{"location":"meta-level/#purpose","title":"Purpose","text":"<ul> <li>Supports feature development, bug fixes, and other contributions using a branch-based workflow.</li> </ul>"},{"location":"meta-level/#key-components","title":"Key Components","text":"<ul> <li>Branches:</li> <li><code>main</code>: Stable release branch.</li> <li><code>staging</code>: Active development branch for integration testing.</li> <li>Feature branches: For specific tasks or issues.</li> <li>Commits: Follow conventional commit messages to ensure clarity.</li> <li>Pull Requests (PRs): Used to merge feature branches into <code>staging</code>.</li> </ul>"},{"location":"meta-level/#tools-and-actions","title":"Tools and Actions","text":"<ul> <li>Git CLI for branch management.</li> <li>Automated checks triggered by PR events (e.g., linting, testing).</li> </ul>"},{"location":"meta-level/#known-issues","title":"Known Issues","text":"<ul> <li>Need for clearer branch naming conventions.</li> <li>Standardization of commit message format.</li> </ul>"},{"location":"meta-level/#gaps-and-recommendations","title":"Gaps and Recommendations","text":"<ul> <li>Document branch naming conventions explicitly.</li> <li>Integrate a commit linter to enforce standards.</li> </ul>"},{"location":"meta-level/#2-release-management-workflow","title":"2. Release Management Workflow","text":""},{"location":"meta-level/#purpose_1","title":"Purpose","text":"<ul> <li>Manages the preparation, validation, and deployment of new releases.</li> </ul>"},{"location":"meta-level/#key-components_1","title":"Key Components","text":"<ul> <li>Tagging:</li> <li>Pre-release tags: <code>prep-vX.Y.Z</code> to trigger workflows.</li> <li>Final release tags: <code>vX.Y.Z</code> for stable releases.</li> <li>Changelog Updates: Automated updates during release preparation.</li> <li>Release Branches: Created during the preparation of major or minor versions.</li> </ul>"},{"location":"meta-level/#tools-and-actions_1","title":"Tools and Actions","text":"<ul> <li>Release Drafter: Generates draft release notes based on merged PRs.</li> <li>Custom Actions:</li> <li><code>version_calculation.py</code> for semantic versioning.</li> <li><code>update_changelog.py</code> for changelog management.</li> </ul>"},{"location":"meta-level/#known-issues_1","title":"Known Issues","text":"<ul> <li>Inconsistent changelog updates during pre-release workflows.</li> <li>Potential gaps in tagging validation.</li> </ul>"},{"location":"meta-level/#gaps-and-recommendations_1","title":"Gaps and Recommendations","text":"<ul> <li>Align release draft workflow with GitHub\u2019s generation process.</li> <li>Automate validation of tags and ensure consistency with semantic versioning.</li> </ul>"},{"location":"meta-level/#3-deployment-workflow","title":"3. Deployment Workflow","text":""},{"location":"meta-level/#purpose_2","title":"Purpose","text":"<ul> <li>Builds and deploys the documentation site via GitHub Pages.</li> </ul>"},{"location":"meta-level/#key-components_2","title":"Key Components","text":"<ul> <li>Pages Workflow: Automatically deploys changes from <code>main</code> to the GitHub Pages site.</li> <li>MkDocs: Static site generator for documentation.</li> </ul>"},{"location":"meta-level/#tools-and-actions_2","title":"Tools and Actions","text":"<ul> <li>GitHub Actions:</li> <li><code>mkdocs-gh-pages.yml</code> for deployment.</li> <li>Dependencies:</li> <li>Listed in <code>requirements.txt</code>.</li> </ul>"},{"location":"meta-level/#known-issues_2","title":"Known Issues","text":"<ul> <li>Occasional version mismatches between deployed site and repository source.</li> <li>Lack of validation for MkDocs version consistency.</li> </ul>"},{"location":"meta-level/#gaps-and-recommendations_2","title":"Gaps and Recommendations","text":"<ul> <li>Create a GitHub Action to validate MkDocs version consistency (back burner).</li> <li>Add deployment logs for improved troubleshooting.</li> </ul>"},{"location":"meta-level/#testing-strategy","title":"Testing Strategy","text":"<p>To ensure the reliability of these workflows:</p> <ol> <li>Unit Tests for Custom Actions:<ul> <li>Validate scripts like <code>version_calculation.py</code> and <code>update_changelog.py</code>.</li> </ul> </li> <li>Integration Tests:<ul> <li>Simulate end-to-end workflows to confirm alignment.</li> </ul> </li> <li>Manual QA:<ul> <li>Periodically review Pages deployments for accuracy.</li> </ul> </li> </ol>"},{"location":"meta-level/#documentation-goals","title":"Documentation Goals","text":"<ul> <li>Create detailed guides for each workflow in the <code>docs/</code> directory.</li> <li>Ensure README and MkDocs documentation align with actual practices.</li> <li>Maintain an up-to-date changelog that reflects all workflow updates.</li> </ul>"},{"location":"meta-level/#next-steps","title":"Next Steps","text":"<ol> <li>Audit Existing Workflows: Review YAML files and custom scripts for inconsistencies.</li> <li>Refine Documentation: Ensure all workflows are documented clearly and concisely.</li> <li>Test and Validate: Execute workflows to identify and fix gaps.</li> <li>Abstract and Generalize: Simplify changelog and versioning processes for flexibility.</li> </ol>"},{"location":"meta-level/#conclusion","title":"Conclusion","text":"<p>By documenting, testing, and refining these workflows, the repository can achieve consistency, clarity, and alignment across development and deployment processes. These steps will help stabilize the repository and move toward the 0.1 milestone.</p>"},{"location":"release-process/","title":"Release Process Guide","text":"<p>This guide details the complete release process used across Deepworks repositories.</p>"},{"location":"release-process/#release-lifecycle","title":"Release Lifecycle","text":""},{"location":"release-process/#1-development-phase","title":"1. Development Phase","text":"<pre><code>graph TD\n    A[Feature Branch] --&gt; B[Create PR]\n    B --&gt; C[Merge to Develop]\n    C --&gt; D[Update Changelog]\n    C --&gt; E[Update Draft Release]\n    D --&gt; F[Next Development]\n    E --&gt; F</code></pre>"},{"location":"release-process/#activities","title":"Activities","text":"<ul> <li>Feature development in branches</li> <li>PRs created for review</li> <li>Merges trigger automatic updates</li> <li>Changelog entries added</li> <li>Draft release updated</li> </ul>"},{"location":"release-process/#2-release-preparation","title":"2. Release Preparation","text":"<pre><code>graph TD\n    A[Develop Branch] --&gt; B[Create prep-v* Tag]\n    B --&gt; C[Create Release Branch]\n    C --&gt; D[Update Version Numbers]\n    D --&gt; E[Create Release PR]\n    E --&gt; F[Review Changes]\n    F --&gt; G[Merge to Develop]</code></pre>"},{"location":"release-process/#process","title":"Process","text":"<ol> <li>Create prep tag:</li> </ol> <pre><code>git tag prep-v1.0.0\ngit push origin prep-v1.0.0\n</code></pre> <ol> <li>Automated actions:</li> <li>Release branch created</li> <li>Changelog updated</li> <li>Version numbers updated</li> <li>Release PR created</li> </ol>"},{"location":"release-process/#3-release-publication","title":"3. Release Publication","text":"<pre><code>graph TD\n    A[Merged Release PR] --&gt; B[Create Version Tag]\n    B --&gt; C[Publish Release]\n    C --&gt; D[Update Documentation]\n    D --&gt; E[Close Release Cycle]</code></pre>"},{"location":"release-process/#version-calculation","title":"Version Calculation","text":""},{"location":"release-process/#automatic-version-incrementing","title":"Automatic Version Incrementing","text":"<ul> <li>Based on semantic versioning</li> <li>Patch version = previous patch + commit count</li> <li>Example:</li> </ul> <pre><code>Current: v1.0.16\n3 new commits\nNext: v1.0.19\n</code></pre>"},{"location":"release-process/#version-tag-format","title":"Version Tag Format","text":"<ul> <li>Release tags: <code>v1.0.0</code></li> <li>Prep tags: <code>prep-v1.0.0</code></li> <li>Development: calculated automatically</li> </ul>"},{"location":"release-process/#changelog-management","title":"Changelog Management","text":""},{"location":"release-process/#structure","title":"Structure","text":"<pre><code># Changelog\n\n## **[(01/03/2025) - v1.0.16](link)**\n- PR #45: Feature addition\n- PR #44: Bug fix\n\n## **01/03/2025 - Unreleased**\n- PR #46: New feature\n</code></pre>"},{"location":"release-process/#automation","title":"Automation","text":"<ol> <li>PR merges add entries</li> <li>Release prep converts format</li> <li>Links added automatically</li> <li>Dates managed by workflow</li> </ol>"},{"location":"release-process/#release-types","title":"Release Types","text":""},{"location":"release-process/#draft-releases","title":"Draft Releases","text":"<ul> <li>Updated automatically</li> <li>Track ongoing changes</li> <li>Version calculated dynamically</li> <li>No manual intervention needed</li> </ul>"},{"location":"release-process/#prep-releases","title":"Prep Releases","text":"<ul> <li>Created via prep tags</li> <li>Convert changelog format</li> <li>Create release branches</li> <li>Generate release PRs</li> </ul>"},{"location":"release-process/#final-releases","title":"Final Releases","text":"<ul> <li>Published via version tags</li> <li>Include all changes</li> <li>Link to changelog</li> <li>Permanent versions</li> </ul>"},{"location":"release-process/#release-branch-strategy","title":"Release Branch Strategy","text":""},{"location":"release-process/#branch-flow","title":"Branch Flow","text":"<pre><code>graph LR\n    A[Feature] --&gt; B[Develop]\n    B --&gt; C[Release Branch]\n    C --&gt; D[Develop]\n    D --&gt; E[Main/Tag]</code></pre>"},{"location":"release-process/#branch-naming","title":"Branch Naming","text":"<ul> <li>Feature: <code>feature/*</code></li> <li>Release: <code>release/v*</code></li> <li>Main: <code>main</code></li> <li>Develop: <code>develop</code></li> </ul>"},{"location":"release-process/#common-scenarios","title":"Common Scenarios","text":""},{"location":"release-process/#regular-development","title":"Regular Development","text":"<ol> <li>Create feature branch</li> <li>Make changes</li> <li>Create PR</li> <li>Merge to develop</li> <li>Automatic updates occur</li> </ol>"},{"location":"release-process/#release-creation","title":"Release Creation","text":"<ol> <li>Create prep tag</li> <li>Review release PR</li> <li>Merge release PR</li> <li>Create version tag</li> <li>Release publishes</li> </ol>"},{"location":"release-process/#hotfix-process","title":"Hotfix Process","text":"<ol> <li>Branch from main</li> <li>Fix issue</li> <li>Create PR</li> <li>Special version handling</li> <li>Release creation</li> </ol>"},{"location":"release-process/#troubleshooting","title":"Troubleshooting","text":""},{"location":"release-process/#version-issues","title":"Version Issues","text":"<ul> <li>Check tag format</li> <li>Verify commit history</li> <li>Review version calculation</li> </ul>"},{"location":"release-process/#release-problems","title":"Release Problems","text":"<ul> <li>Check workflow permissions</li> <li>Verify branch names</li> <li>Review workflow logs</li> </ul>"},{"location":"release-process/#changelog-issues","title":"Changelog Issues","text":"<ul> <li>Check file format</li> <li>Verify PR process</li> <li>Review automation logs</li> </ul>"},{"location":"release-process/#best-practices","title":"Best Practices","text":"<ol> <li>Version Tagging</li> <li>Use semantic versioning</li> <li>Follow tag format exactly</li> <li> <p>Don't skip versions</p> </li> <li> <p>Changelog Entries</p> </li> <li>Clear descriptions</li> <li>Reference PR numbers</li> <li> <p>Keep format consistent</p> </li> <li> <p>Release Process</p> </li> <li>Follow order exactly</li> <li>Review all changes</li> <li>Test before release</li> </ol>"},{"location":"release-process/#integration-points","title":"Integration Points","text":""},{"location":"release-process/#github-actions","title":"GitHub Actions","text":"<ul> <li>Release Drafter</li> <li>Changelog Updater</li> <li>MkDocs Publisher</li> </ul>"},{"location":"release-process/#repository-settings","title":"Repository Settings","text":"<ul> <li>Branch protection</li> <li>Required reviews</li> <li>Status checks</li> </ul>"},{"location":"release-process/#documentation","title":"Documentation","text":"<ul> <li>Version updates</li> <li>Release notes</li> <li>Changelog links</li> </ul>"},{"location":"actions/","title":"Actions Overview","text":""},{"location":"actions/#architecture","title":"Architecture","text":"<p>Our GitHub Actions toolkit follows a layered architecture that promotes reusability, maintainability, and clear separation of concerns.</p>"},{"location":"actions/#core-actions","title":"Core Actions","text":"<ul> <li>Atomic, self-contained operations</li> <li>Single responsibility principle</li> <li>Highly reusable</li> <li>Learn more about Core Actions</li> </ul>"},{"location":"actions/#composite-actions","title":"Composite Actions","text":"<ul> <li>Combine core actions</li> <li>Add workflow-specific logic</li> <li>Higher-level operations</li> <li>Learn more about Composite Actions</li> </ul>"},{"location":"actions/#directory-structure","title":"Directory Structure","text":"<pre><code>actions/\n\u251c\u2500\u2500 core/                  # Atomic operations\n\u2502   \u251c\u2500\u2500 version_calculator/\n\u2502   \u2514\u2500\u2500 version_updater/\n\u2514\u2500\u2500 composite/            # Combined operations\n    \u2514\u2500\u2500 update_changelog/\n</code></pre>"},{"location":"actions/#usage-patterns","title":"Usage Patterns","text":""},{"location":"actions/#using-core-actions","title":"Using Core Actions","text":"<pre><code>steps:\n  - name: Calculate Version\n    uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n    with:\n      default_version: 'v0.1.0'\n</code></pre>"},{"location":"actions/#using-composite-actions","title":"Using Composite Actions","text":"<pre><code>steps:\n  - name: Update Changelog\n    uses: deepworks-net/github.toolkit/actions/composite/update_changelog@v1\n    with:\n      content: ${{ steps.notes.outputs.content }}\n</code></pre>"},{"location":"actions/#standards","title":"Standards","text":""},{"location":"actions/#docker-configuration","title":"Docker Configuration","text":"<ul> <li>Standard base image (python:3.9-slim)</li> <li>Consistent dependency management</li> <li>Clear entrypoint configuration</li> </ul>"},{"location":"actions/#testing","title":"Testing","text":"<ul> <li>Comprehensive test workflows</li> <li>Standard test structure</li> <li>Clear naming conventions</li> </ul>"},{"location":"actions/#documentation","title":"Documentation","text":"<ul> <li>Complete API documentation</li> <li>Usage examples</li> <li>Error handling guidance</li> </ul>"},{"location":"actions/#available-actions","title":"Available Actions","text":""},{"location":"actions/#core","title":"Core","text":"<ul> <li>Core Actions<ul> <li>Manage Release</li> <li>Version Calculator</li> <li>Version Updater</li> </ul> </li> </ul>"},{"location":"actions/#composite","title":"Composite","text":"<ul> <li>Update Changelog</li> </ul>"},{"location":"actions/composite/","title":"Composite Actions","text":""},{"location":"actions/composite/update_changelog/","title":"Changelog Update Action","text":"<p>Synchronizes the repository's <code>CHANGELOG.md</code> with content from the draft release, ensuring an \"Unreleased\" section reflects all recent changes and maintains consistent formatting.</p>"},{"location":"actions/composite/update_changelog/#usage","title":"Usage","text":"<pre><code>steps:\n  - name: Update Changelog\n    uses: ./actions/changelog_update\n    with:\n      github-token: ${{ secrets.GITHUB_TOKEN }}\n      version: ${{ steps.version.outputs.next_version }}\n</code></pre>"},{"location":"actions/composite/update_changelog/#inputs","title":"Inputs","text":"Input Description Required Default <code>github-token</code> GitHub token for API access Yes N/A <code>version</code> Version number to use in the unreleased section Yes N/A"},{"location":"actions/composite/update_changelog/#functionality","title":"Functionality","text":""},{"location":"actions/composite/update_changelog/#draft-release-content","title":"Draft Release Content","text":"<p>This action retrieves draft release details via the GitHub API:</p> <ol> <li>Identifies the draft release.</li> <li>Extracts PR entries.</li> <li>Strips footer content.</li> </ol>"},{"location":"actions/composite/update_changelog/#changelog-format","title":"Changelog Format","text":"<p>Follows a consistent structure:</p> <pre><code># Repository Changelog\n\n## **MM/DD/YYYY - vX.Y.Z Unreleased**\n- PR #123: Feature description\n- PR #124: Another change\n\n## **[(MM/DD/YYYY) - vX.Y.Z](link-to-release)**\n- Previous release content\n</code></pre>"},{"location":"actions/composite/update_changelog/#processing-steps","title":"Processing Steps","text":"<ol> <li>Fetches draft release content.</li> <li>Updates or creates the \"Unreleased\" section with:</li> <li>Current date</li> <li>Provided version number</li> <li>Draft release content.</li> <li>Preserves all previous releases.</li> <li>Maintains formatting consistency.</li> </ol>"},{"location":"actions/composite/update_changelog/#implementation-details","title":"Implementation Details","text":""},{"location":"actions/composite/update_changelog/#environment-setup","title":"Environment Setup","text":"<ul> <li>Configures Git in container environments.</li> <li>Installs required tools (e.g., GitHub CLI).</li> <li>Prepares workspace access.</li> </ul>"},{"location":"actions/composite/update_changelog/#git-operations","title":"Git Operations","text":"<p>Handles:</p> <ul> <li>Git configuration.</li> <li>Committing changes.</li> <li>Pushing to a staging branch.</li> </ul>"},{"location":"actions/composite/update_changelog/#error-handling","title":"Error Handling","text":"<p>Provides clear feedback for:</p> <ol> <li>Missing GitHub token.</li> <li>API request failures.</li> <li>File operation issues.</li> <li>Git command failures.</li> </ol>"},{"location":"actions/composite/update_changelog/#example-workflows","title":"Example Workflows","text":""},{"location":"actions/composite/update_changelog/#basic-usage-with-version-calculation","title":"Basic Usage with Version Calculation","text":"<pre><code>jobs:\n  update-changelog:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          ref: staging\n          fetch-depth: 0\n\n      - name: Calculate Version\n        uses: ./actions/version_calculation\n        id: version\n\n      - name: Update Changelog\n        uses: ./actions/changelog_update\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          version: ${{ steps.version.outputs.next_version }}\n</code></pre>"},{"location":"actions/composite/update_changelog/#manual-version-specification","title":"Manual Version Specification","text":"<pre><code>steps:\n  - name: Update Changelog\n    uses: ./actions/changelog_update\n    with:\n      github-token: ${{ secrets.GITHUB_TOKEN }}\n      version: 'v1.0.0'\n</code></pre>"},{"location":"actions/composite/update_changelog/#requirements","title":"Requirements","text":"<ol> <li> <p>Repository must include:</p> <ul> <li><code>CHANGELOG.md</code> in the root directory.</li> <li>Draft release for content sourcing.</li> <li>Proper GitHub token permissions.</li> </ul> </li> <li> <p>Environment must have:</p> <ul> <li>Git.</li> <li>GitHub CLI.</li> <li>Python 3.9+.</li> </ul> </li> </ol>"},{"location":"actions/composite/update_changelog/#files","title":"Files","text":""},{"location":"actions/composite/update_changelog/#actionyml","title":"<code>action.yml</code>","text":"<p>Defines the action interface:</p> <ul> <li>Input parameters.</li> <li>Environment configuration.</li> <li>Docker container setup.</li> </ul>"},{"location":"actions/composite/update_changelog/#dockerfile","title":"<code>Dockerfile</code>","text":"<p>Configures the container with:</p> <ul> <li>Python runtime.</li> <li>Git installation.</li> <li>GitHub CLI.</li> <li>Necessary environment setups.</li> </ul>"},{"location":"actions/composite/update_changelog/#update_changelogpy","title":"<code>update_changelog.py</code>","text":"<p>Implements core logic:</p> <ul> <li>Fetches draft release content.</li> <li>Parses and updates the changelog.</li> <li>Manages Git operations.</li> <li>Handles errors.</li> </ul>"},{"location":"actions/composite/update_changelog/#error-cases","title":"Error Cases","text":"<p>The action accounts for several potential issues:</p> <ol> <li> <p>Missing Draft Release</p> <ul> <li>Outputs a clear error message.</li> <li>Returns a non-zero exit code.</li> </ul> </li> <li> <p>GitHub API Issues</p> <ul> <li>Validates tokens.</li> <li>Handles request failures or permission errors.</li> </ul> </li> <li> <p>File Operations</p> <ul> <li>Detects missing changelog.</li> <li>Handles write permissions or format inconsistencies.</li> </ul> </li> <li> <p>Git Operations</p> <ul> <li>Resolves configuration or push errors.</li> <li>Handles permission issues.</li> </ul> </li> </ol>"},{"location":"actions/composite/update_changelog/#future-improvements","title":"Future Improvements","text":"<p>Possible enhancements:</p> <ol> <li>Support custom changelog formats.</li> <li>Handle multiple changelog files.</li> <li>Categorize release notes.</li> <li>Automate version bumping.</li> <li>Customize commit messages.</li> </ol>"},{"location":"actions/composite/update_changelog/#integration-points","title":"Integration Points","text":"<p>Designed to integrate with:</p> <ul> <li>Version calculation actions.</li> <li>Release preparation workflows.</li> <li>GitHub release drafts.</li> <li>Branch protection rules.</li> </ul>"},{"location":"actions/composite/update_changelog/#contributing","title":"Contributing","text":"<p>To contribute:</p> <ol> <li>Update the Python script for logic changes.</li> <li>Test with various changelog states.</li> <li>Verify formatting consistency.</li> <li>Submit a PR for review.</li> </ol>"},{"location":"actions/core/","title":"Core Action Structure","text":"<p>This document outlines the standard structure and components required for a core action in the GitHub toolkit.</p>"},{"location":"actions/core/#directory-structure","title":"Directory Structure","text":"<pre><code>actions/core/&lt;action_name&gt;/              # Action root directory\n\u251c\u2500\u2500 action.yml                          # Action metadata and interface\n\u251c\u2500\u2500 Dockerfile                          # Standardized container setup\n\u251c\u2500\u2500 main.py                            # Primary action logic\n\u251c\u2500\u2500 requirements.txt                    # Action dependencies (optional)\n\u2514\u2500\u2500 README.md                          # Action-specific documentation\n\n.github/workflows/\n\u251c\u2500\u2500 core.action.&lt;action_name&gt;.yml       # Reusable workflow wrapper\n\u2514\u2500\u2500 test.core.action.&lt;action_name&gt;.yml  # Test workflow\n\ndocs/\n\u251c\u2500\u2500 actions/core/&lt;action_name&gt;/\n\u2502   \u2514\u2500\u2500 index.md                       # Action usage documentation\n\u2514\u2500\u2500 workflows/\n    \u2514\u2500\u2500 &lt;action_name&gt;.md               # Workflow usage documentation\n</code></pre>"},{"location":"actions/core/#component-specifications","title":"Component Specifications","text":""},{"location":"actions/core/#1-actionyml","title":"1. action.yml","text":"<pre><code>name: \"Action Name\"\ndescription: \"Clear, concise description of action purpose\"\nauthor: \"Deepworks\"\n\ninputs:\n  input_name:\n    description: \"Clear description of input\"\n    required: false\n    default: \"default_value\"\n\noutputs:\n  output_name:\n    description: \"Clear description of output\"\n\nruns:\n  using: \"docker\"\n  image: \"Dockerfile\"\n\nbranding:\n  icon: \"appropriate-icon\"\n  color: \"appropriate-color\"\n</code></pre>"},{"location":"actions/core/#2-dockerfile","title":"2. Dockerfile","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /action\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y git &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Configure git for workspace\nRUN git config --global --add safe.directory /github/workspace\n\n# Install Python dependencies (If present)\nCOPY requirements.txt /action/\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy action files\nCOPY *.py /action/\nCOPY action.yml /action/\n\nENTRYPOINT [\"python\", \"/action/main.py\"]\n</code></pre>"},{"location":"actions/core/#3-mainpy","title":"3. main.py","text":"<pre><code>#!/usr/bin/env python3\n\nimport os\nimport sys\n\ndef validate_inputs():\n    \"\"\"Validate all action inputs.\"\"\"\n    pass\n\ndef main():\n    \"\"\"Main action logic.\"\"\"\n    # Get inputs with defaults\n    inputs = {\n        'input_name': os.environ.get('INPUT_INPUT_NAME', 'default')\n    }\n\n    # Validate inputs\n    validate_inputs(inputs)\n\n    # Process action\n    outputs = {\n        'output_name': 'value'\n    }\n\n    # Set outputs for GitHub Actions\n    with open(os.environ['GITHUB_OUTPUT'], 'a') as f:\n        for key, value in outputs.items():\n            f.write(f\"{key}={value}\\n\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"actions/core/#4-reusable-workflow-coreactionyml","title":"4. Reusable Workflow (core.action..yml) <pre><code>name: Core (Atomic) Action - Action Name\n\non:\n  workflow_dispatch:\n  workflow_call:\n    inputs:\n      input_name:\n        type: string\n        required: false\n        default: 'default_value'\n    outputs:\n      output_name:\n        description: \"Output description\"\n        value: ${{ jobs.action-job.outputs.output_name }}\n\njobs:\n  action-job:\n    runs-on: ubuntu-latest\n    outputs:\n      output_name: ${{ steps.action-step.outputs.output_name }}\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Run Action\n        id: action-step\n        uses: deepworks-net/github.toolkit/actions/core/&lt;action_name&gt;@v1\n        with:\n          input_name: ${{ inputs.input_name }}\n</code></pre>","text":""},{"location":"actions/core/#5-test-workflow-testcoreactionyml","title":"5. Test Workflow (test.core.action..yml) <pre><code>name: Test Core Action - Action Name\n\non:\n  pull_request:\n    paths:\n      - 'actions/core/&lt;action_name&gt;/**'\n      - '.github/workflows/core.action.&lt;action_name&gt;.yml'\n      - '.github/workflows/test.core.action.&lt;action_name&gt;.yml'\n  workflow_dispatch:\n\njobs:\n  test-basic:\n    name: Test Basic Functionality\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Test Action\n        id: action\n        uses: ./actions/core/&lt;action_name&gt;\n\n      - name: Verify Output Existence\n        run: |\n          if [[ -z \"${{ steps.action.outputs.output_name }}\" ]]; then\n            echo \"Missing required output\"\n            exit 1\n          fi\n\n      - name: Verify Output Value\n        run: |\n          if [[ \"${{ steps.action.outputs.output_name }}\" != \"expected_value\" ]]; then\n            echo \"Expected 'expected_value', got '${{ steps.action.outputs.output_name }}'\"\n            exit 1\n          fi\n\n  test-error-cases:\n    # Add error case tests\n</code></pre>","text":""},{"location":"actions/core/#6-documentation-structure","title":"6. Documentation Structure","text":""},{"location":"actions/core/#action-documentation-indexmd","title":"Action Documentation (index.md)","text":"<pre><code># Core Action: Name\n\n## Overview\nClear description of action purpose and functionality\n\n## Usage\n```yaml\nExample usage code\n```\n\n## Inputs\nInput documentation table\n\n## Outputs\nOutput documentation table\n\n## Behavior Matrix\nClear matrix of input/output combinations\n\n## Example Use Cases\nReal-world examples\n\n## Error Handling\nDocumentation of error cases and handling\n</code></pre>"},{"location":"actions/core/#workflow-documentation-md","title":"Workflow Documentation (.md) <pre><code># Action Name Workflow\n\n## Overview\nDescription of workflow\n\n## Usage\n```yaml\nExample workflow usage\n```\n\n## Inputs/Outputs\nClear documentation of workflow interface\n\n## Behavior\nDetailed behavior documentation\n\n## Implementation Examples\n\nReal-world workflow usage examples\n</code></pre>","text":""},{"location":"actions/core/#implementation-requirements","title":"Implementation Requirements","text":"<ol> <li> <p>Input Validation</p> <ul> <li>All inputs must be validated</li> <li>Clear error messages for invalid inputs</li> <li>Sensible defaults where possible</li> </ul> </li> <li> <p>Output Handling</p> <ul> <li>All outputs must be documented</li> <li>Use GITHUB_OUTPUT environment file</li> <li>Consistent output format</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Clear error messages</li> <li>Appropriate exit codes</li> <li>Comprehensive error documentation</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Test basic functionality</li> <li>Test all error cases</li> <li>Test edge cases</li> <li>Verify all outputs</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Clear usage examples</li> <li>Complete behavior documentation</li> <li>Error case documentation</li> <li>Real-world examples</li> </ul> </li> </ol>"},{"location":"actions/core/manage_release/","title":"Core Action: Manage Release","text":""},{"location":"actions/core/manage_release/#overview","title":"Overview","text":"<p>The Manage Release action provides a standardized interface for working with GitHub draft releases. It supports three main operations:</p> <ol> <li>Creating/ensuring a draft release exists</li> <li>Getting current draft release information</li> <li>Updating draft release content</li> </ol>"},{"location":"actions/core/manage_release/#usage","title":"Usage","text":""},{"location":"actions/core/manage_release/#draft-operation","title":"Draft Operation","text":"<p>Creates a new draft release or returns existing one:</p> <pre><code>- name: Create Draft Release\n  uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    operation: 'draft'\n    name: 'Release v1.0.0'\n    body: 'Initial release notes'\n</code></pre>"},{"location":"actions/core/manage_release/#get-operation","title":"Get Operation","text":"<p>Retrieves current draft release information:</p> <pre><code>- name: Get Draft Release\n  uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    operation: 'get'\n</code></pre>"},{"location":"actions/core/manage_release/#update-operation","title":"Update Operation","text":"<p>Updates draft release content with different modes:</p> <pre><code>- name: Update Draft Release\n  uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n  with:\n    github-token: ${{ secrets.GITHUB_TOKEN }}\n    operation: 'update'\n    content: 'New content to add'\n    update_mode: 'append'  # or 'replace', 'prepend'\n</code></pre>"},{"location":"actions/core/manage_release/#inputs","title":"Inputs","text":"Input Description Required Default <code>github-token</code> GitHub token for API access Yes - <code>operation</code> Operation to perform (draft, get, update) No <code>get</code> <code>name</code> Release name for draft operation No <code>Draft Release</code> <code>body</code> Initial release body for draft operation No <code>''</code> <code>content</code> Content for update operation No* - <code>update_mode</code> How to update content (replace, append, prepend) No <code>replace</code> <p>*Required for update operation</p>"},{"location":"actions/core/manage_release/#outputs","title":"Outputs","text":"Output Description <code>id</code> Release ID <code>body</code> Release content <code>tag_name</code> Release tag name <code>name</code> Release name <code>exists</code> Whether draft release exists (true/false)"},{"location":"actions/core/manage_release/#behavior","title":"Behavior","text":""},{"location":"actions/core/manage_release/#draft-operation_1","title":"Draft Operation","text":"<ol> <li>Checks for existing draft release</li> <li>If none exists, creates new draft</li> <li>Returns release information</li> </ol>"},{"location":"actions/core/manage_release/#get-operation_1","title":"Get Operation","text":"<ol> <li>Fetches current draft release</li> <li>Returns release information if exists</li> <li>Indicates if no draft exists</li> </ol>"},{"location":"actions/core/manage_release/#update-operation_1","title":"Update Operation","text":"<ol> <li>Gets current draft release</li> <li>Updates content based on mode:<ul> <li><code>replace</code>: Overwrites existing content</li> <li><code>append</code>: Adds to end of content</li> <li><code>prepend</code>: Adds to beginning of content</li> </ul> </li> <li>Returns updated release information</li> </ol>"},{"location":"actions/core/manage_release/#error-handling","title":"Error Handling","text":"<p>The action handles several error cases:</p> <ol> <li> <p>Invalid Operation</p> <ul> <li>Unsupported operation specified</li> <li>Missing required inputs for operation</li> </ul> </li> <li> <p>GitHub API Errors</p> <ul> <li>Authentication failures</li> <li>Rate limiting</li> <li>Network issues</li> </ul> </li> <li> <p>Content Errors</p> <ul> <li>Missing content for update</li> <li>Invalid update mode</li> <li>Release not found for update</li> </ul> </li> </ol>"},{"location":"actions/core/manage_release/#example-use-cases","title":"Example Use Cases","text":""},{"location":"actions/core/manage_release/#release-preparation","title":"Release Preparation","text":"<pre><code>jobs:\n  prepare:\n    steps:\n      - name: Create Draft\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n        with:\n          operation: 'draft'\n          name: 'Release v1.0.0'\n</code></pre>"},{"location":"actions/core/manage_release/#pr-merge-updates","title":"PR Merge Updates","text":"<pre><code>on:\n  pull_request:\n    types: [closed]\n    branches: [main]\n\njobs:\n  update-notes:\n    if: github.event.pull_request.merged == true\n    steps:\n      - name: Update Release Notes\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n        with:\n          operation: 'update'\n          content: |\n            - PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}\n          update_mode: 'append'\n</code></pre>"},{"location":"actions/core/manage_release/#release-status-check","title":"Release Status Check","text":"<pre><code>jobs:\n  check:\n    steps:\n      - name: Check Draft Release\n        id: release\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n\n      - name: Create if Missing\n        if: steps.release.outputs.exists == 'false'\n        uses: deepworks-net/github.toolkit/actions/core/manage_release@v1\n        with:\n          operation: 'draft'\n</code></pre>"},{"location":"actions/core/manage_release/#implementation","title":"Implementation","text":""},{"location":"actions/core/manage_release/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Release management logic</li> <li><code>action.yml</code>: Action metadata</li> <li><code>Dockerfile</code>: Container configuration</li> </ul>"},{"location":"actions/core/manage_release/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.9</li> <li>Git</li> <li>curl</li> <li>GitHub API access</li> </ul>"},{"location":"actions/core/version_calculator/","title":"Core Action: Version Calculator","text":""},{"location":"actions/core/version_calculator/#overview","title":"Overview","text":"<p>The Version Calculator is a core (atomic) action that calculates the next version number based on Git tags and commit history. It follows semantic versioning principles while providing predictable, automated version calculation.</p>"},{"location":"actions/core/version_calculator/#usage","title":"Usage","text":"<pre><code>- name: Calculate Version\n  uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n  with:\n    default_version: 'v0.1.0'      # Optional: Default if no tags exist\n    version_prefix: 'v'            # Optional: Prefix for version tags\n    tag_pattern: 'v*'             # Optional: Pattern to match version tags\n</code></pre>"},{"location":"actions/core/version_calculator/#inputs","title":"Inputs","text":"Input Description Required Default <code>default_version</code> Default version when no tags exist. Must match prefix format (e.g., 'v0.1.0' or 'ver0.1.0') No <code>v0.1.0</code> <code>version_prefix</code> Prefix for version tags (e.g., 'v' in v1.0.0) No <code>v</code> <code>tag_pattern</code> Pattern to match version tags No <code>v*</code>"},{"location":"actions/core/version_calculator/#outputs","title":"Outputs","text":"Output Description <code>next_version</code> The calculated next version, based on commit count since current version <code>current_version</code> Current version (latest matching tag or default_version if no tags) <code>commit_count</code> Number of commits since the current version (0 if using default version)"},{"location":"actions/core/version_calculator/#behavior-matrix","title":"Behavior Matrix","text":""},{"location":"actions/core/version_calculator/#no-tags-exist","title":"No Tags Exist","text":"<ul> <li><code>current_version</code> = default_version</li> <li><code>next_version</code> = default_version</li> <li><code>commit_count</code> = 0</li> </ul>"},{"location":"actions/core/version_calculator/#tags-exist-no-new-commits","title":"Tags Exist, No New Commits","text":"<ul> <li><code>current_version</code> = latest matching tag</li> <li><code>next_version</code> = latest matching tag</li> <li><code>commit_count</code> = 0</li> </ul>"},{"location":"actions/core/version_calculator/#tags-exist-new-commits","title":"Tags Exist, New Commits","text":"<ul> <li><code>current_version</code> = latest matching tag</li> <li><code>next_version</code> = increment patch version by commit count</li> <li><code>commit_count</code> = number of commits since tag</li> </ul>"},{"location":"actions/core/version_calculator/#custom-prefix","title":"Custom Prefix","text":"<p>Note: When using a custom prefix, default_version must match the prefix</p> <pre><code>- uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n  with:\n    default_version: 'ver0.1.0'  # Must match prefix\n    version_prefix: 'ver'\n    tag_pattern: 'ver*'\n</code></pre>"},{"location":"actions/core/version_calculator/#example-use-cases","title":"Example Use Cases","text":""},{"location":"actions/core/version_calculator/#basic-version-calculation","title":"Basic Version Calculation","text":"<pre><code>steps:\n  - name: Calculate Version\n    id: version\n    uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n\n  - name: Use Outputs\n    run: |\n      echo \"Current: ${{ steps.version.outputs.current_version }}\"\n      echo \"Next: ${{ steps.version.outputs.next_version }}\"\n      echo \"Commits: ${{ steps.version.outputs.commit_count }}\"\n</code></pre>"},{"location":"actions/core/version_calculator/#custom-version-prefix","title":"Custom Version Prefix","text":"<pre><code>steps:\n  - name: Calculate Version\n    uses: deepworks-net/github.toolkit/actions/core/version_calculator@v1\n    with:\n      default_version: 'ver0.1.0'\n      version_prefix: 'ver'\n      tag_pattern: 'ver*'\n</code></pre>"},{"location":"actions/core/version_calculator/#error-cases","title":"Error Cases","text":"<p>The action will fail with clear error messages in these cases:</p> <ol> <li> <p>Invalid Version Format</p> <ul> <li>Version doesn't match pattern: <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> <li>Default version doesn't match specified prefix</li> <li>Tag found with invalid format</li> </ul> </li> <li> <p>Git Errors</p> <ul> <li>Unable to access repository</li> <li>Git configuration issues</li> <li>Tag retrieval fails</li> </ul> </li> <li> <p>Input Validation</p> <ul> <li>Mismatched prefix and default_version</li> <li>Invalid version pattern</li> <li>Invalid tag pattern</li> </ul> </li> </ol>"},{"location":"actions/core/version_calculator/#implementation","title":"Implementation","text":""},{"location":"actions/core/version_calculator/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Version calculation logic</li> <li><code>action.yml</code>: Action metadata and input/output definitions</li> <li><code>Dockerfile</code>: Standardized container configuration</li> </ul>"},{"location":"actions/core/version_calculator/#docker-configuration","title":"Docker Configuration","text":"<pre><code>FROM python:3.9-slim\n\nWORKDIR /action\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y git &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Configure git for workspace\nRUN git config --global --add safe.directory /github/workspace\n\n# Copy action files\nCOPY *.py /action/\nCOPY action.yml /action/\n\nENTRYPOINT [\"python\", \"/action/main.py\"]\n</code></pre>"},{"location":"actions/core/version_updater/","title":"Core Action: Version Updater","text":""},{"location":"actions/core/version_updater/#overview","title":"Overview","text":"<p>The Version Updater is a core (atomic) action that updates version numbers across multiple file types. It handles YAML, JSON, and text files while preserving file structure and formatting.</p>"},{"location":"actions/core/version_updater/#usage","title":"Usage","text":"<pre><code>- name: Update Versions\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'       # Required\n    files: |               # Required\n      \"package.json\"\n      \"version.yml\"\n    strip_v_prefix: true   # Optional\n</code></pre>"},{"location":"actions/core/version_updater/#inputs","title":"Inputs","text":"Input Description Required Default <code>version</code> Version number to set (format: v1.2.3 or 1.2.3) Yes - <code>files</code> Files to update (one per line) Yes - <code>strip_v_prefix</code> Remove 'v' prefix when updating files No <code>true</code>"},{"location":"actions/core/version_updater/#outputs","title":"Outputs","text":"Output Description <code>files</code> JSON array of successfully updated files"},{"location":"actions/core/version_updater/#file-type-support","title":"File Type Support","text":""},{"location":"actions/core/version_updater/#yaml-files-yml-yaml","title":"YAML Files (.yml, .yaml)","text":"<pre><code># Input\nversion: 1.0.0\n\n# Output (with strip_v_prefix: true)\nversion: 2.0.0\n\n# Output (with strip_v_prefix: false)\nversion: v2.0.0\n</code></pre>"},{"location":"actions/core/version_updater/#json-files-json","title":"JSON Files (.json)","text":"<pre><code>// Input\n{\n  \"version\": \"1.0.0\"\n}\n\n// Output (with strip_v_prefix: true)\n{\n  \"version\": \"2.0.0\"\n}\n</code></pre>"},{"location":"actions/core/version_updater/#text-files-any-extension","title":"Text Files (any extension)","text":"<p>Uses regex pattern matching to find and update version numbers. Matches patterns like:</p> <ul> <li><code>version = 1.0.0</code></li> <li><code>version: \"1.0.0\"</code></li> <li><code>\"version\": \"1.0.0\"</code></li> </ul>"},{"location":"actions/core/version_updater/#error-handling","title":"Error Handling","text":"<p>The action provides clear error messages and appropriate exit codes:</p> <ol> <li> <p>Version Format</p> <ul> <li>Invalid format provided</li> <li>Missing version input</li> </ul> </li> <li> <p>File Operations</p> <ul> <li>File not found</li> <li>Permission denied</li> <li>Invalid file format (JSON)</li> </ul> </li> <li> <p>Version Fields</p> <ul> <li>No version field found in file</li> <li>Multiple version fields in file</li> </ul> </li> </ol> <p>Exit Codes:</p> <ul> <li>0: All files successfully updated</li> <li>1: One or more files failed to update</li> </ul>"},{"location":"actions/core/version_updater/#implementation","title":"Implementation","text":""},{"location":"actions/core/version_updater/#core-files","title":"Core Files","text":"<ul> <li><code>main.py</code>: Version update logic</li> <li><code>action.yml</code>: Action metadata and interface</li> <li><code>Dockerfile</code>: Standardized container configuration</li> <li><code>requirements.txt</code>: Python dependencies</li> </ul>"},{"location":"actions/core/version_updater/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.9</li> <li>PyYAML 6.0.1</li> <li>Git (for workspace configuration)</li> </ul>"},{"location":"actions/core/version_updater/#example-use-cases","title":"Example Use Cases","text":""},{"location":"actions/core/version_updater/#basic-single-file-update","title":"Basic Single File Update","text":"<pre><code>- name: Update Package Version\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'\n    files: |\n      \"package.json\"\n</code></pre>"},{"location":"actions/core/version_updater/#multiple-files-with-different-formats","title":"Multiple Files with Different Formats","text":"<pre><code>- name: Update All Versions\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'\n    files: |\n      \"package.json\"\n      \"version.yml\"\n      \"VERSION\"\n</code></pre>"},{"location":"actions/core/version_updater/#keep-version-prefix","title":"Keep Version Prefix","text":"<pre><code>- name: Update with Prefix\n  uses: deepworks-net/github.toolkit/actions/core/version_updater@v1\n  with:\n    version: 'v2.0.0'\n    files: |\n      \"config.yml\"\n    strip_v_prefix: false\n</code></pre>"},{"location":"actions/core/version_updater/#testing","title":"Testing","text":"<p>Each feature is verified through automated tests:</p> <ol> <li> <p>File Type Support:</p> <ul> <li>YAML updates</li> <li>JSON updates</li> <li>Text file updates</li> </ul> </li> <li> <p>Version Handling:</p> <ul> <li>With/without v prefix</li> <li>Multiple formats</li> <li>Invalid formats</li> </ul> </li> <li> <p>Error Cases:</p> <ul> <li>Missing files</li> <li>Invalid formats</li> <li>Permission issues</li> </ul> </li> </ol>"},{"location":"repo/","title":"GitHub Core Repository","text":""},{"location":"repo/#github-core-repository-files","title":"GitHub Core Repository Files","text":"README.mdCHANGELOG.mdLICENSE.md <p>Below is the Github Core Repository Readme</p> <p>Below is the Github Core Repository Changelog</p> <p>Below is the Github Core Repository License</p> <p>The MIT License (MIT)</p> <p>Copyright (c) 2024 Deepworks</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"repo/#github-actions-collection","title":"GitHub Actions Collection","text":"<p>A collection of reusable GitHub Actions workflows for standardizing development processes across repositories.</p>"},{"location":"repo/#available-workflows","title":"Available Workflows","text":""},{"location":"repo/#release-management","title":"Release Management","text":"<p>Two workflows that work together to manage the release process:</p>"},{"location":"repo/#1-prepare-release-branch-prep-releaseyml","title":"1. Prepare Release Branch (<code>prep-release.yml</code>)","text":"<p>Creates a release branch and prepares the changelog for release.</p> <p>Trigger: Push a tag with prefix <code>prep-v</code> (e.g., <code>prep-v1.0.0</code>)</p> <p>Actions:</p> <ul> <li>Creates a release branch</li> <li>Moves Unreleased changelog items to a new version section</li> <li>Removes the Unreleased section for release</li> <li>Creates a PR for review</li> </ul> <p>Usage:</p> <pre><code>git tag prep-v1.0.0\ngit push origin prep-v1.0.0\n</code></pre>"},{"location":"repo/#2-update-changelog-update-changelogyml","title":"2. Update Changelog (<code>update-changelog.yml</code>)","text":"<p>Automatically updates the changelog when PRs are merged to develop.</p> <p>Trigger: PR merged to develop branch</p> <p>Actions:</p> <ul> <li>Adds PR to Unreleased section of changelog</li> <li>Creates Unreleased section if it doesn't exist</li> <li>Maintains changelog formatting</li> </ul> <p>Usage: Automatic - no manual steps required. PR merges to develop trigger the workflow.</p>"},{"location":"repo/#changelog-format","title":"Changelog Format","text":"<p>The workflows maintain the following changelog format:</p> <pre><code># Repository Changelog\n*Note: the changes in this log are automatically generated and commited via github actions, modify only if you know what you are doing!*\n\n## **MM/DD/YYYY - Unreleased**\n- PR #{number}: {title}\n\n## **[(MM/DD/YYYY) - {version}](https://github.com/{org}/{repo}/releases/tag/{version})**\n- PR #{number}: {title}\n</code></pre>"},{"location":"repo/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Copy the desired workflow files to your repository's <code>.github/workflows/</code> directory</li> <li>No additional configuration needed - workflows use repository context for variables</li> </ol>"},{"location":"repo/#requirements","title":"Requirements","text":"<ul> <li>GitHub repository with develop branch</li> <li>Permissions to push tags and create PRs</li> <li>Changelog.md file in repository root (will be created if missing)</li> </ul>"},{"location":"repo/#contributing","title":"Contributing","text":"<ol> <li>Create a feature branch off develop</li> <li>Make your changes</li> <li>Create a PR to develop</li> <li>Changelog will be automatically updated upon merge</li> </ol>"},{"location":"repo/#support","title":"Support","text":"<p>For issues, questions, or contributions:</p> <ol> <li>Open an issue in this repository</li> <li>Include workflow name and description of need</li> </ol>"},{"location":"repo/#license","title":"License","text":"<p>MIT License - See LICENSE.md file for details</p>"},{"location":"repo/#githubactions-repository-changelog","title":"github.actions Repository Changelog","text":"<p>Note: the changes in this log are automatically generated and commited via github actions, modify only if you know what you are doing!</p>"},{"location":"repo/#01072025-v10138","title":"(01/07/2025) - v1.0.138","text":""},{"location":"repo/#whats-changed","title":"What's Changed","text":"<ul> <li>Version Updater @mattbuske (#126)</li> <li>Version Calculator @mattbuske (#125)</li> </ul>"},{"location":"repo/#full-changelog-v10122v10138","title":"Full Changelog: v1.0.122...v1.0.138","text":""},{"location":"repo/#01062025-v10122","title":"(01/06/2025) - v1.0.122","text":""},{"location":"repo/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Version Update Action Addition @mattbuske (#120)</li> <li>Fixed Update Version Name @mattbuske (#119)</li> <li>Version Update Action @mattbuske (#118)</li> </ul>"},{"location":"repo/#full-changelog-v10104v10117","title":"Full Changelog: v1.0.104...v1.0.117","text":""},{"location":"repo/#01062025-v10104","title":"(01/06/2025) - v1.0.104","text":""},{"location":"repo/#whats-changed_2","title":"What's Changed","text":"<ul> <li>Further Workflow Updates @mattbuske (#115)</li> <li>Further Workflow Updates @mattbuske (#110)</li> <li>Workflow Enhancements @mattbuske (#101)</li> <li>Testing Updates @mattbuske (#100)</li> </ul>"},{"location":"repo/#full-changelog-v1097v10104","title":"Full Changelog: v1.0.97...v1.0.104","text":""},{"location":"repo/#01052025-v1097","title":"(01/05/2025) - v1.0.97","text":"<ul> <li>Change to Pre-release Mode @mattbuske (#99)</li> </ul>"},{"location":"repo/#01042025-v1034","title":"(01/04/2025) - v1.0.34","text":"<ul> <li>52 Fix Release Tag Bug @mattbuske (#63)</li> </ul>"},{"location":"repo/#01032025-v1024","title":"(01/03/2025) - v1.0.24","text":"<ul> <li>PR #53: 52 Fix Release Tag Bug</li> </ul>"},{"location":"repo/#01032025-v1016","title":"(01/03/2025) - v1.0.16","text":"<ul> <li>PR #45: Prepare Release Documentation</li> </ul>"},{"location":"repo/#12252024-v100","title":"(12/25/2024) - v1.0.0","text":"<ul> <li>Reduce Changelog</li> <li>PR #19: Updated release drafter workflow</li> <li>PR #18: Added gitignore File</li> <li>PR #16: Update Changelog</li> <li>PR #15: Updated Changelog github action</li> </ul>"},{"location":"repo/inc/","title":"GitHub Actions Collection","text":"<p>A collection of reusable GitHub Actions workflows for standardizing development processes across repositories.</p>"},{"location":"repo/inc/#available-workflows","title":"Available Workflows","text":""},{"location":"repo/inc/#release-management","title":"Release Management","text":"<p>Two workflows that work together to manage the release process:</p>"},{"location":"repo/inc/#1-prepare-release-branch-prep-releaseyml","title":"1. Prepare Release Branch (<code>prep-release.yml</code>)","text":"<p>Creates a release branch and prepares the changelog for release.</p> <p>Trigger: Push a tag with prefix <code>prep-v</code> (e.g., <code>prep-v1.0.0</code>)</p> <p>Actions:</p> <ul> <li>Creates a release branch</li> <li>Moves Unreleased changelog items to a new version section</li> <li>Removes the Unreleased section for release</li> <li>Creates a PR for review</li> </ul> <p>Usage:</p> <pre><code>git tag prep-v1.0.0\ngit push origin prep-v1.0.0\n</code></pre>"},{"location":"repo/inc/#2-update-changelog-update-changelogyml","title":"2. Update Changelog (<code>update-changelog.yml</code>)","text":"<p>Automatically updates the changelog when PRs are merged to develop.</p> <p>Trigger: PR merged to develop branch</p> <p>Actions:</p> <ul> <li>Adds PR to Unreleased section of changelog</li> <li>Creates Unreleased section if it doesn't exist</li> <li>Maintains changelog formatting</li> </ul> <p>Usage: Automatic - no manual steps required. PR merges to develop trigger the workflow.</p>"},{"location":"repo/inc/#changelog-format","title":"Changelog Format","text":"<p>The workflows maintain the following changelog format:</p> <pre><code># Repository Changelog\n*Note: the changes in this log are automatically generated and commited via github actions, modify only if you know what you are doing!*\n\n## **MM/DD/YYYY - Unreleased**\n- PR #{number}: {title}\n\n## **[(MM/DD/YYYY) - {version}](https://github.com/{org}/{repo}/releases/tag/{version})**\n- PR #{number}: {title}\n</code></pre>"},{"location":"repo/inc/#setup-instructions","title":"Setup Instructions","text":"<ol> <li>Copy the desired workflow files to your repository's <code>.github/workflows/</code> directory</li> <li>No additional configuration needed - workflows use repository context for variables</li> </ol>"},{"location":"repo/inc/#requirements","title":"Requirements","text":"<ul> <li>GitHub repository with develop branch</li> <li>Permissions to push tags and create PRs</li> <li>Changelog.md file in repository root (will be created if missing)</li> </ul>"},{"location":"repo/inc/#contributing","title":"Contributing","text":"<ol> <li>Create a feature branch off develop</li> <li>Make your changes</li> <li>Create a PR to develop</li> <li>Changelog will be automatically updated upon merge</li> </ol>"},{"location":"repo/inc/#support","title":"Support","text":"<p>For issues, questions, or contributions:</p> <ol> <li>Open an issue in this repository</li> <li>Include workflow name and description of need</li> </ol>"},{"location":"repo/inc/#license","title":"License","text":"<p>MIT License - See LICENSE.md file for details</p>"},{"location":"repo/inc/CHANGELOG/","title":"github.actions Repository Changelog","text":"<p>Note: the changes in this log are automatically generated and commited via github actions, modify only if you know what you are doing!</p>"},{"location":"repo/inc/CHANGELOG/#01072025-v10138","title":"(01/07/2025) - v1.0.138","text":""},{"location":"repo/inc/CHANGELOG/#whats-changed","title":"What's Changed","text":"<ul> <li>Version Updater @mattbuske (#126)</li> <li>Version Calculator @mattbuske (#125)</li> </ul>"},{"location":"repo/inc/CHANGELOG/#full-changelog-v10122v10138","title":"Full Changelog: v1.0.122...v1.0.138","text":""},{"location":"repo/inc/CHANGELOG/#01062025-v10122","title":"(01/06/2025) - v1.0.122","text":""},{"location":"repo/inc/CHANGELOG/#whats-changed_1","title":"What's Changed","text":"<ul> <li>Version Update Action Addition @mattbuske (#120)</li> <li>Fixed Update Version Name @mattbuske (#119)</li> <li>Version Update Action @mattbuske (#118)</li> </ul>"},{"location":"repo/inc/CHANGELOG/#full-changelog-v10104v10117","title":"Full Changelog: v1.0.104...v1.0.117","text":""},{"location":"repo/inc/CHANGELOG/#01062025-v10104","title":"(01/06/2025) - v1.0.104","text":""},{"location":"repo/inc/CHANGELOG/#whats-changed_2","title":"What's Changed","text":"<ul> <li>Further Workflow Updates @mattbuske (#115)</li> <li>Further Workflow Updates @mattbuske (#110)</li> <li>Workflow Enhancements @mattbuske (#101)</li> <li>Testing Updates @mattbuske (#100)</li> </ul>"},{"location":"repo/inc/CHANGELOG/#full-changelog-v1097v10104","title":"Full Changelog: v1.0.97...v1.0.104","text":""},{"location":"repo/inc/CHANGELOG/#01052025-v1097","title":"(01/05/2025) - v1.0.97","text":"<ul> <li>Change to Pre-release Mode @mattbuske (#99)</li> </ul>"},{"location":"repo/inc/CHANGELOG/#01042025-v1034","title":"(01/04/2025) - v1.0.34","text":"<ul> <li>52 Fix Release Tag Bug @mattbuske (#63)</li> </ul>"},{"location":"repo/inc/CHANGELOG/#01032025-v1024","title":"(01/03/2025) - v1.0.24","text":"<ul> <li>PR #53: 52 Fix Release Tag Bug</li> </ul>"},{"location":"repo/inc/CHANGELOG/#01032025-v1016","title":"(01/03/2025) - v1.0.16","text":"<ul> <li>PR #45: Prepare Release Documentation</li> </ul>"},{"location":"repo/inc/CHANGELOG/#12252024-v100","title":"(12/25/2024) - v1.0.0","text":"<ul> <li>Reduce Changelog</li> <li>PR #19: Updated release drafter workflow</li> <li>PR #18: Added gitignore File</li> <li>PR #16: Update Changelog</li> <li>PR #15: Updated Changelog github action</li> </ul>"},{"location":"repo/inc/LICENSE/","title":"LICENSE","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2024 Deepworks</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"tests/","title":"Testing Overview","text":""},{"location":"tests/#test-structure-and-organization","title":"Test Structure and Organization","text":""},{"location":"tests/#file-structure","title":"File Structure","text":"<pre><code>.github/workflows/\n\u251c\u2500\u2500 core.action.*.yml               # Core action workflows\n\u251c\u2500\u2500 test.core.action.*.yml         # Core action tests\n\u2514\u2500\u2500 test.composite.action.*.yml    # Composite action tests\n\ndocs/tests/                        # Test documentation\n\u251c\u2500\u2500 index.md                       # This overview\n\u251c\u2500\u2500 core/                          # Core action test docs\n\u2502   \u251c\u2500\u2500 version_calculator.md\n\u2502   \u2514\u2500\u2500 version_updater.md\n\u2514\u2500\u2500 composite/                     # Composite action test docs\n</code></pre>"},{"location":"tests/#test-naming-convention","title":"Test Naming Convention","text":"<ul> <li><code>test.core.action.&lt;name&gt;.yml</code> - Tests for core (atomic) actions</li> <li><code>test.composite.action.&lt;name&gt;.yml</code> - Tests for composite actions</li> </ul>"},{"location":"tests/#common-test-patterns","title":"Common Test Patterns","text":""},{"location":"tests/#1-input-validation-tests","title":"1. Input Validation Tests","text":"<pre><code>test-invalid-input:\n  steps:\n    - Run action with invalid input\n    - Verify appropriate error\n    - Check error messaging\n</code></pre>"},{"location":"tests/#2-output-format-tests","title":"2. Output Format Tests","text":"<pre><code>test-output-format:\n  steps:\n    - Run action\n    - Verify all outputs exist\n    - Validate output format\n    - Check output values\n</code></pre>"},{"location":"tests/#3-error-cases","title":"3. Error Cases","text":"<pre><code>test-error-handling:\n  steps:\n    - Create error condition\n    - Run action with continue-on-error\n    - Verify failure behavior\n    - Check error messaging\n</code></pre>"},{"location":"tests/#standard-test-components","title":"Standard Test Components","text":""},{"location":"tests/#environment-setup","title":"Environment Setup","text":"<pre><code>steps:\n  - uses: actions/checkout@v4\n  - name: Clean Environment\n    run: |\n      # Setup steps\n</code></pre>"},{"location":"tests/#output-verification","title":"Output Verification","text":"<pre><code>- name: Verify Outputs\n  run: |\n    # Check output existence\n    if [[ -z \"${{ steps.action.outputs.output_name }}\" ]]; then\n      echo \"Missing required output\"\n      exit 1\n    fi\n    # Verify output value\n    if [[ \"${{ steps.action.outputs.output_name }}\" != \"expected\" ]]; then\n      echo \"Expected 'expected', got '${{ steps.action.outputs.output_name }}'\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/#test-categories","title":"Test Categories","text":""},{"location":"tests/#1-core-action-tests","title":"1. Core Action Tests","text":"<ul> <li>Focus on atomic functionality</li> <li>Verify input/output contract</li> <li>Test error conditions</li> <li>Example: Version Calculator Tests</li> </ul>"},{"location":"tests/#2-composite-action-tests","title":"2. Composite Action Tests","text":"<ul> <li>Test integration of core actions</li> <li>Verify workflow logic</li> <li>Test end-to-end scenarios</li> <li>Handle workflow outputs</li> </ul>"},{"location":"tests/#test-documentation","title":"Test Documentation","text":"<p>Each test workflow should have corresponding documentation that includes:</p> <ol> <li> <p>Overview</p> <ul> <li>Purpose of tests</li> <li>Test categories</li> <li>Required setup</li> </ul> </li> <li> <p>Test Cases</p> <ul> <li>Individual test descriptions</li> <li>Expected inputs/outputs</li> <li>Error scenarios</li> </ul> </li> <li> <p>Implementation Details</p> <ul> <li>Environment setup</li> <li>Verification methods</li> <li>Clean-up procedures</li> </ul> </li> <li> <p>Local Testing</p> <ul> <li>Setup instructions</li> <li>Required tools</li> <li>Execution steps</li> </ul> </li> </ol>"},{"location":"tests/#local-test-execution","title":"Local Test Execution","text":"<p>To run tests locally:</p> <pre><code># Install act\nbrew install act  # or equivalent for your OS\n\n# Run specific test workflow\nact pull_request -W .github/workflows/test.core.action.version_calculator.yml\n\n# Run all tests\nact pull_request\n</code></pre>"},{"location":"tests/#adding-new-tests","title":"Adding New Tests","text":"<p>When adding new tests:</p> <ol> <li>Follow Naming Convention</li> </ol> <pre><code>test.core.action.&lt;name&gt;.yml\ntest.composite.action.&lt;name&gt;.yml\n</code></pre> <ol> <li> <p>Include Standard Sections</p> <ul> <li>Environment setup</li> <li>Test cases</li> <li>Output verification</li> <li>Error handling</li> </ul> </li> <li> <p>Document Tests</p> <ul> <li>Create test documentation</li> <li>Update index if needed</li> <li>Include local testing instructions</li> </ul> </li> <li> <p>Test Categories</p> <ul> <li>Input validation</li> <li>Output verification</li> <li>Error handling</li> <li>Edge cases</li> </ul> </li> </ol>"},{"location":"tests/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Test Independence</p> <ul> <li>Each test should be self-contained</li> <li>Clean up after tests</li> <li>Don't rely on other test results</li> </ul> </li> <li> <p>Clear Error Messages</p> <ul> <li>Descriptive failure outputs</li> <li>Expected vs actual values</li> <li>Clear error conditions</li> </ul> </li> <li> <p>Comprehensive Coverage</p> <ul> <li>Test all inputs</li> <li>Verify all outputs</li> <li>Include error cases</li> <li>Test edge conditions</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Document test purpose</li> <li>Include example usage</li> <li>Provide troubleshooting tips</li> </ul> </li> </ol>"},{"location":"tests/#available-test-suites","title":"Available Test Suites","text":""},{"location":"tests/#core-actions","title":"Core Actions","text":"<ul> <li>Version Calculator Tests</li> <li>Version Updater Tests</li> </ul>"},{"location":"tests/#composite-actions","title":"Composite Actions","text":"<ul> <li>Update Changelog Tests</li> </ul>"},{"location":"tests/#contributing","title":"Contributing","text":"<p>When contributing new tests:</p> <ol> <li>Follow existing patterns</li> <li>Include documentation</li> <li>Test error cases</li> <li>Provide local test instructions</li> <li>Update this index</li> </ol> <p>See Contributing Guide for more details.</p>"},{"location":"tests/core/version_calculator/","title":"Version Calculator Tests","text":""},{"location":"tests/core/version_calculator/#overview","title":"Overview","text":"<p>The test suite for the Version Calculator core action validates functionality, error handling, and output consistency.</p>"},{"location":"tests/core/version_calculator/#test-structure","title":"Test Structure","text":"<pre><code># .github/workflows/test.core.action.version_calculator.yml\non:\n  pull_request:\n    paths:\n      - 'actions/core/version_calculator/**'\n      - '.github/workflows/core.action.version_calculator.yml'\n      - '.github/workflows/test.core.action.version_calculator.yml'\n  workflow_dispatch:\n</code></pre>"},{"location":"tests/core/version_calculator/#test-cases","title":"Test Cases","text":""},{"location":"tests/core/version_calculator/#1-default-version-no-tags","title":"1. Default Version (No Tags)","text":"<p>Tests the behavior when no Git tags exist.</p> <pre><code>test-no-tags:\n  steps:\n    - Clean Environment\n      # Remove local tags\n    - Run Calculator\n      # Input: default_version: 'v0.1.0'\n    - Verify Outputs\n      # Expect:\n      # - next_version: v0.1.0\n      # - current_version: v0.1.0\n      # - commit_count: 0\n</code></pre>"},{"location":"tests/core/version_calculator/#2-version-with-tags","title":"2. Version With Tags","text":"<p>Tests version calculation with existing tags and commits.</p> <pre><code>test-with-tag:\n  steps:\n    - Clean Environment\n    - Create Test State\n      # - Create tag v1.0.0\n      # - Add 2 commits\n    - Run Calculator\n    - Verify Outputs\n      # Expect:\n      # - next_version: v1.0.2\n      # - current_version: v1.0.0\n      # - commit_count: 2\n</code></pre>"},{"location":"tests/core/version_calculator/#3-custom-version-prefix","title":"3. Custom Version Prefix","text":"<p>Tests handling of non-standard version prefixes.</p> <pre><code>test-custom-prefix:\n  steps:\n    - Clean Environment\n    - Create Test State\n      # - Create tag ver1.0.0\n      # - Add 1 commit\n    - Run Calculator\n      # Input:\n      # - version_prefix: 'ver'\n      # - tag_pattern: 'ver*'\n    - Verify Outputs\n      # Expect:\n      # - next_version: ver1.0.1\n      # - current_version: ver1.0.0\n      # - commit_count: 1\n</code></pre>"},{"location":"tests/core/version_calculator/#4-output-verification","title":"4. Output Verification","text":"<p>Tests completeness and format of all outputs.</p> <pre><code>test-all-outputs:\n  steps:\n    - Clean Environment\n    - Create Test State\n      # - Create tag v0.1.0\n      # - Add 1 commit\n    - Run Calculator\n    - Verify All Outputs\n      # Check existence and values of:\n      # - next_version\n      # - current_version\n      # - commit_count\n</code></pre>"},{"location":"tests/core/version_calculator/#environment-setup","title":"Environment Setup","text":"<p>Each test follows a standard setup pattern:</p> <ol> <li> <p>Clean Environment</p> <pre><code>- name: Clean Local Environment\nrun: |\n    git config --global user.email \"test@github.com\"\n    git config --global user.name \"Test User\"\n    git tag -l | xargs -r git tag -d\n</code></pre> </li> <li> <p>Test State Creation</p> <pre><code>- name: Create Test State\nrun: |\n    git tag &lt;tag_name&gt;\n    git commit --allow-empty -m \"test commit\"\n</code></pre> </li> </ol>"},{"location":"tests/core/version_calculator/#output-verification","title":"Output Verification","text":""},{"location":"tests/core/version_calculator/#standard-output-check","title":"Standard Output Check","text":"<pre><code>- name: Verify Output Existence\n  run: |\n    if [[ -z \"${{ steps.version.outputs.next_version }}\" ]] || \\\n       [[ -z \"${{ steps.version.outputs.current_version }}\" ]] || \\\n       [[ -z \"${{ steps.version.outputs.commit_count }}\" ]]; then\n      echo \"Missing required outputs\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_calculator/#value-verification","title":"Value Verification","text":"<pre><code>- name: Verify Output Values\n  run: |\n    if [[ \"${{ steps.version.outputs.next_version }}\" != \"expected_value\" ]]; then\n      echo \"Expected expected_value, got ${{ steps.version.outputs.next_version }}\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_calculator/#error-handling","title":"Error Handling","text":"<p>Tests verify that the action:</p> <ol> <li>Handles missing tags appropriately</li> <li>Validates version formats</li> <li>Manages commit counting correctly</li> <li>Provides all required outputs</li> </ol>"},{"location":"tests/core/version_calculator/#local-testing","title":"Local Testing","text":"<p>To run tests locally:</p> <ol> <li>Clone repository</li> <li>Navigate to action directory</li> <li>Run test workflow:</li> </ol> <pre><code>act pull_request -W .github/workflows/test.core.action.version_calculator.yml\n</code></pre>"},{"location":"tests/core/version_updater/","title":"Version Updater Tests","text":""},{"location":"tests/core/version_updater/#overview","title":"Overview","text":"<p>The test suite for the Version Updater core action validates file updates, error handling, and output consistency across different file types.</p>"},{"location":"tests/core/version_updater/#test-structure","title":"Test Structure","text":"<pre><code># .github/workflows/test.core.action.version_updater.yml\non:\n  pull_request:\n    paths:\n      - 'actions/core/version_updater/**'\n      - '.github/workflows/core.action.version_updater.yml'\n      - '.github/workflows/test.core.action.version_updater.yml'\n  workflow_dispatch:\n</code></pre>"},{"location":"tests/core/version_updater/#test-cases","title":"Test Cases","text":""},{"location":"tests/core/version_updater/#1-yaml-file-update","title":"1. YAML File Update","text":"<p>Tests version updates in YAML files.</p> <pre><code>test-yaml-update:\n  steps:\n    - Create Test File\n      # Create YAML with version field\n    - Run Updater\n      # Input:\n      # - version: 'v2.0.0'\n      # - files: [\"test.yml\"]\n    - Verify Output\n      # Check file content and format\n</code></pre>"},{"location":"tests/core/version_updater/#2-json-file-update","title":"2. JSON File Update","text":"<p>Tests version updates in JSON files.</p> <pre><code>test-json-update:\n  steps:\n    - Create Test File\n      # Create JSON with version field\n    - Run Updater\n    - Verify Output\n      # Check JSON structure and format\n      # Use jq for comparison\n</code></pre>"},{"location":"tests/core/version_updater/#3-multiple-files-update","title":"3. Multiple Files Update","text":"<p>Tests updating multiple files simultaneously.</p> <pre><code>test-multiple-files:\n  steps:\n    - Create Test Files\n      # Create YAML and JSON files\n    - Run Updater\n      # Input: multiple files\n    - Verify Outputs\n      # Check all files updated correctly\n</code></pre>"},{"location":"tests/core/version_updater/#4-version-prefix-handling","title":"4. Version Prefix Handling","text":"<p>Tests prefix stripping and preservation.</p> <pre><code>test-keep-v-prefix:\n  steps:\n    - Create Test File\n    - Run Updater\n      # Input: strip_v_prefix: false\n    - Verify Output\n      # Check prefix maintained\n</code></pre>"},{"location":"tests/core/version_updater/#5-invalid-scenarios","title":"5. Invalid Scenarios","text":"<p>Tests error handling for various failure cases.</p> <pre><code>test-invalid-version:\n  steps:\n    - Run Updater with invalid version\n    - Verify failure\n\ntest-missing-file:\n  steps:\n    - Run Updater with nonexistent file\n    - Verify empty output array\n\ntest-no-version-field:\n  steps:\n    - Create file without version\n    - Run Updater\n    - Verify handling\n</code></pre>"},{"location":"tests/core/version_updater/#file-creation-templates","title":"File Creation Templates","text":""},{"location":"tests/core/version_updater/#yaml-test-file","title":"YAML Test File","text":"<pre><code>- name: Create Test YAML\n  run: |\n    echo \"version: 1.0.0\" &gt; test.yml\n</code></pre>"},{"location":"tests/core/version_updater/#json-test-file","title":"JSON Test File","text":"<pre><code>- name: Create Test JSON\n  run: |\n    echo '{\"version\": \"1.0.0\"}' &gt; test.json\n</code></pre>"},{"location":"tests/core/version_updater/#output-verification","title":"Output Verification","text":""},{"location":"tests/core/version_updater/#file-content-check","title":"File Content Check","text":"<pre><code>- name: Verify Output\n  run: |\n    content=$(cat test.yml)\n    if [[ \"$content\" != \"version: 2.0.0\" ]]; then\n      echo \"Expected 'version: 2.0.0', got '$content'\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_updater/#json-content-check","title":"JSON Content Check","text":"<pre><code>- name: Verify JSON Output\n  run: |\n    content=$(cat test.json | jq -c '.')\n    expected='{\"version\":\"2.0.0\"}'\n    if [[ \"$content\" != \"$expected\" ]]; then\n      echo \"Expected '$expected', got '$content'\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_updater/#output-format-check","title":"Output Format Check","text":"<pre><code>- name: Verify Output Format\n  run: |\n    output='${{ steps.updater.outputs.files }}'\n    if ! echo \"$output\" | jq -e . &gt;/dev/null 2&gt;&amp;1; then\n      echo \"Invalid JSON array output: $output\"\n      exit 1\n    fi\n</code></pre>"},{"location":"tests/core/version_updater/#error-handling-verification","title":"Error Handling Verification","text":"<p>Tests verify the action:</p> <ol> <li>Validates input version format</li> <li>Handles missing/invalid files</li> <li>Reports file update status correctly</li> <li>Maintains consistent output format</li> </ol>"},{"location":"tests/core/version_updater/#common-patterns","title":"Common Patterns","text":""},{"location":"tests/core/version_updater/#test-setup","title":"Test Setup","text":"<pre><code>steps:\n  - uses: actions/checkout@v4\n  - name: Create Test File\n    run: |\n      # Create test files\n  - name: Run Version Updater\n    id: updater\n    uses: ./actions/core/version_updater\n    with:\n      # Test inputs\n</code></pre>"},{"location":"tests/core/version_updater/#output-verification_1","title":"Output Verification","text":"<pre><code>- name: Verify Outputs\n  run: |\n    # Check file contents\n    # Verify output format\n    # Validate results\n</code></pre>"},{"location":"tests/core/version_updater/#local-testing","title":"Local Testing","text":"<p>To run tests locally:</p> <ol> <li>Clone repository</li> <li>Navigate to action directory</li> <li>Run test workflow:</li> </ol> <pre><code>act pull_request -W .github/workflows/test.core.action.version_updater.yml\n</code></pre>"},{"location":"tests/core/version_updater/#adding-new-tests","title":"Adding New Tests","text":"<p>When adding tests:</p> <ol> <li>Follow existing patterns for setup/verification</li> <li>Include positive and negative test cases</li> <li>Verify all outputs and file states</li> <li>Document expected behaviors</li> <li>Include clean up steps if needed</li> </ol>"},{"location":"workflows/","title":"Workflows Overview","text":""},{"location":"workflows/#structure","title":"Structure","text":"<pre><code>.github/workflows/\n\u251c\u2500\u2500 core.action.*.yml          # Atomic, reusable workflows\n\u251c\u2500\u2500 flow.*.yml                 # Higher-level flows combining actions/workflows\n\u2514\u2500\u2500 test.*.yml                # Test workflows for actions/flows\n</code></pre>"},{"location":"workflows/#naming-convention","title":"Naming Convention","text":""},{"location":"workflows/#core-action-workflows","title":"Core Action Workflows","text":"<ul> <li>Pattern: <code>core.action.&lt;name&gt;.yml</code></li> <li>Purpose: Atomic, reusable operations</li> <li>Example: <code>core.action.version_calculator.yml</code></li> </ul>"},{"location":"workflows/#flow-workflows","title":"Flow Workflows","text":"<ul> <li>Pattern: <code>flow.&lt;name&gt;.yml</code></li> <li>Purpose: Combine core actions into higher-level operations</li> <li>Example: <code>flow.prepare_release.yml</code></li> </ul>"},{"location":"workflows/#test-workflows","title":"Test Workflows","text":"<ul> <li>Pattern: <code>test.&lt;type&gt;.&lt;name&gt;.yml</code></li> <li>Purpose: Validate actions and flows</li> <li>Example: <code>test.core.action.version_calculator.yml</code></li> </ul>"},{"location":"workflows/#implemented-workflows","title":"Implemented Workflows","text":""},{"location":"workflows/#core-action-workflows_1","title":"Core Action Workflows","text":""},{"location":"workflows/#version-calculator","title":"Version Calculator","text":"<ul> <li>Calculates next version based on Git tags</li> <li>Provides current version, next version, and commit count</li> <li>Used for automated version management</li> </ul>"},{"location":"workflows/#version-updater","title":"Version Updater","text":"<ul> <li>Updates version numbers across multiple files</li> <li>Supports YAML, JSON, and text files</li> <li>Maintains file formatting and structure</li> </ul>"},{"location":"workflows/#flow-workflows_1","title":"Flow Workflows","text":""},{"location":"workflows/#prepare-release","title":"Prepare Release","text":"<ul> <li>Combines version calculation and updating</li> <li>Manages release preparation process</li> <li>Creates release branches and PRs</li> </ul>"},{"location":"workflows/#test-workflows_1","title":"Test Workflows","text":""},{"location":"workflows/#version-calculator-tests","title":"Version Calculator Tests","text":"<ul> <li>Validates version calculation logic</li> <li>Tests with and without existing tags</li> <li>Verifies output format and error handling</li> </ul>"},{"location":"workflows/#version-updater-tests","title":"Version Updater Tests","text":"<ul> <li>Tests file updates across formats</li> <li>Validates prefix handling</li> <li>Verifies error conditions</li> </ul>"},{"location":"workflows/#usage-patterns","title":"Usage Patterns","text":""},{"location":"workflows/#using-core-action-workflows","title":"Using Core Action Workflows","text":"<pre><code>jobs:\n  calculate:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n</code></pre>"},{"location":"workflows/#using-flow-workflows","title":"Using Flow Workflows","text":"<pre><code>jobs:\n  prepare:\n    uses: deepworks-net/github.toolkit/.github/workflows/flow.prepare_release.yml@v1\n</code></pre>"},{"location":"workflows/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"workflows/#core-action-workflows_2","title":"Core Action Workflows","text":"<ol> <li>Single responsibility principle</li> <li>Clear input/output contract</li> <li>Error handling</li> <li>Comprehensive tests</li> </ol>"},{"location":"workflows/#flow-workflows_2","title":"Flow Workflows","text":"<ol> <li>Combine core actions</li> <li>Handle workflow state</li> <li>Provide higher-level operations</li> <li>Error recovery</li> </ol>"},{"location":"workflows/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Workflow Selection</p> <ul> <li>Use core actions for atomic operations</li> <li>Use flows for complex processes</li> <li>Keep responsibilities clear</li> </ul> </li> <li> <p>Version Management</p> <ul> <li>Tag releases appropriately</li> <li>Reference specific versions</li> <li>Document breaking changes</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>Provide clear error messages</li> <li>Handle failure states</li> <li>Document error conditions</li> </ul> </li> <li> <p>Testing</p> <ul> <li>Test all workflows</li> <li>Include error cases</li> <li>Verify outputs</li> </ul> </li> </ol>"},{"location":"workflows/create-release-tag/","title":"Create Release Tag Workflow","text":"<p>This workflow is part of the release automation process. It creates and pushes version tags when release PRs are merged to the main branch, triggering the final release publication.</p>"},{"location":"workflows/create-release-tag/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/create-tag.yml</code></p>"},{"location":"workflows/create-release-tag/#trigger","title":"Trigger","text":"<p>The workflow triggers when pull requests targeting the <code>main</code> branch are closed:</p> <pre><code>on:\n  pull_request:\n    branches:\n      - main\n    types: [closed]\n</code></pre>"},{"location":"workflows/create-release-tag/#conditions","title":"Conditions","text":"<p>The workflow only runs when:</p> <ol> <li>The PR was merged (not just closed)</li> <li>The source branch name starts with <code>release/v</code></li> </ol> <pre><code>if: github.event.pull_request.merged == true &amp;&amp; startsWith(github.event.pull_request.head.ref, 'release/v')\n</code></pre>"},{"location":"workflows/create-release-tag/#process","title":"Process","text":"<ol> <li>Checks out the repository</li> <li>Extracts version number from the release branch name</li> <li>Creates a git tag with that version</li> <li>Pushes the tag to the repository</li> </ol>"},{"location":"workflows/create-release-tag/#integration-points","title":"Integration Points","text":"<p>This workflow is part of the release process chain:</p> <ol> <li>Prepare Release workflow creates release branch (<code>release/vX.Y.Z</code>)</li> <li>PR is created targeting main branch</li> <li>PR is reviewed and merged</li> <li>Create Tag workflow (this one) creates version tag</li> <li>Release Drafter workflow publishes final release</li> </ol>"},{"location":"workflows/create-release-tag/#version-tag-format","title":"Version Tag Format","text":"<p>Tags created by this workflow match the release branch name:</p> <ul> <li>Branch: <code>release/v1.0.34</code></li> <li>Creates tag: <code>v1.0.34</code></li> </ul>"},{"location":"workflows/create-release-tag/#prerequisites","title":"Prerequisites","text":"<ol> <li>Source branch must:</li> <li>Start with <code>release/v</code></li> <li>Contain valid version number</li> <li> <p>Be merged to main branch</p> </li> <li> <p>Repository settings:</p> </li> <li>Allow workflows to create tags</li> <li>Proper access permissions set</li> </ol>"},{"location":"workflows/create-release-tag/#permissions","title":"Permissions","text":"<p>The workflow requires:</p> <ul> <li>Read access to repository</li> <li>Write access for tags</li> <li>Uses <code>GITHUB_TOKEN</code> with default permissions</li> </ul>"},{"location":"workflows/create-release-tag/#error-handling","title":"Error Handling","text":"<p>The workflow will fail if:</p> <ul> <li>PR is not actually merged</li> <li>Branch name doesn't match pattern</li> <li>Tag already exists</li> <li>Insufficient permissions</li> </ul>"},{"location":"workflows/create-release-tag/#usage-example","title":"Usage Example","text":"<ol> <li>Release PR is created:</li> </ol> <pre><code>release/v1.0.34 -&gt; main\n</code></pre> <ol> <li> <p>PR is merged to main</p> </li> <li> <p>Workflow automatically:</p> </li> </ol> <pre><code>git tag v1.0.34\ngit push origin v1.0.34\n</code></pre>"},{"location":"workflows/create-release-tag/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Tag Creation Fails</li> <li>Check if tag already exists</li> <li>Verify branch name format</li> <li> <p>Check workflow permissions</p> </li> <li> <p>Workflow Doesn't Trigger</p> </li> <li>Verify PR target is main branch</li> <li>Check branch name starts with <code>release/v</code></li> <li> <p>Ensure PR was merged, not just closed</p> </li> <li> <p>Push Fails</p> </li> <li>Check repository permissions</li> <li>Verify token access</li> <li>Review workflow logs</li> </ol>"},{"location":"workflows/create-release-tag/#related-workflows","title":"Related Workflows","text":"<ul> <li>Prepare Release</li> <li>Release Drafter</li> <li>Update Changelog</li> </ul>"},{"location":"workflows/create-release-tag/#next-steps","title":"Next Steps","text":"<p>After this workflow runs:</p> <ol> <li>Version tag is created</li> <li>Release Drafter workflow triggers</li> <li>Final release is published</li> </ol>"},{"location":"workflows/create-release-tag/#contributing","title":"Contributing","text":"<p>To modify this workflow:</p> <ol> <li>Fork the repository</li> <li>Edit <code>.github/workflows/create-tag.yml</code></li> <li>Test with a release branch</li> <li>Submit a pull request</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/","title":"MkDocs GitHub Pages Workflow","text":"<p>This reusable workflow automates the process of building and deploying MkDocs documentation to GitHub Pages. It can be used in any repository that uses MkDocs for documentation.</p>"},{"location":"workflows/mkdocs-gh-pages/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/mkdocs-gh-pages.yml</code></p>"},{"location":"workflows/mkdocs-gh-pages/#usage","title":"Usage","text":""},{"location":"workflows/mkdocs-gh-pages/#basic-usage","title":"Basic Usage","text":"<p>To use this workflow in your repository, create a workflow file with the following content:</p> <pre><code>name: Deploy Documentation\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n</code></pre>"},{"location":"workflows/mkdocs-gh-pages/#advanced-usage","title":"Advanced Usage","text":"<p>You can customize the workflow behavior using input parameters:</p> <pre><code>name: Deploy Documentation\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-docs:\n    uses: deepworks-net/github.actions/.github/workflows/mkdocs-gh-pages.yml@main\n    with:\n      python-version: '3.11'\n      requirements-file: 'requirements.txt'\n      readme-source: 'README.md'\n      readme-destination: 'docs/repo/inc/README.md'\n      changelog-source: 'CHANGELOG'\n      changelog-destination: 'docs/repo/inc/CHANGELOG.md'\n      license-source: 'LICENSE'\n      license-destination: 'docs/repo/inc/LICENSE.md'\n</code></pre>"},{"location":"workflows/mkdocs-gh-pages/#input-parameters","title":"Input Parameters","text":"Parameter Description Required Default <code>python-version</code> Python version to use for the build No <code>3.x</code> <code>requirements-file</code> Path to the requirements.txt file No <code>requirements.txt</code> <code>readme-source</code> Source path for README No <code>README.md</code> <code>readme-destination</code> Destination path for README No <code>docs/repo/inc/README.md</code> <code>changelog-source</code> Source path for CHANGELOG No <code>CHANGELOG</code> <code>changelog-destination</code> Destination path for CHANGELOG No <code>docs/repo/inc/CHANGELOG.md</code> <code>license-source</code> Source path for LICENSE No <code>LICENSE</code> <code>license-destination</code> Destination path for LICENSE No <code>docs/repo/inc/LICENSE.md</code>"},{"location":"workflows/mkdocs-gh-pages/#workflow-details","title":"Workflow Details","text":"<p>The workflow performs the following steps:</p> <ol> <li>Checks out the repository with submodules</li> <li>Sets up Python environment</li> <li>Installs dependencies from requirements.txt</li> <li>Copies README.md (if it exists) to <code>docs/repo/inc</code> directory</li> <li>Copies CHANGELOG (if it exists) to <code>docs/repo/inc</code> directory</li> <li>Copies LICENSE (if it exists) to <code>docs/repo/inc</code> directory</li> <li>Builds and deploys MkDocs to GitHub Pages</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#requirements","title":"Requirements","text":"<p>To use this workflow, your repository needs:</p> <ol> <li>MkDocs configuration file (<code>mkdocs.yml</code>)</li> <li>Python dependencies file (<code>requirements.txt</code>) including MkDocs and any required theme/plugins</li> <li>GitHub Pages enabled in repository settings</li> <li>Proper permissions for GitHub Actions</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#example-requirementstxt","title":"Example requirements.txt","text":"<pre><code>mkdocs&gt;=1.6.1\nmkdocs-material&gt;=9.5.49\n</code></pre>"},{"location":"workflows/mkdocs-gh-pages/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workflows/mkdocs-gh-pages/#common-issues","title":"Common Issues","text":"<ol> <li>Build Fails: Ensure all required dependencies are listed in requirements.txt</li> <li>Deploy Fails: Check GitHub Pages settings in repository</li> <li>Missing README: Verify README.md exists at specified source path</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#workflow-logs","title":"Workflow Logs","text":"<p>To check workflow execution logs:</p> <ol> <li>Go to Actions tab in your repository</li> <li>Click on the workflow run</li> <li>Expand the deploy job to see detailed logs</li> </ol>"},{"location":"workflows/mkdocs-gh-pages/#security-considerations","title":"Security Considerations","text":"<ul> <li>The workflow runs with repository contents and GitHub token permissions</li> <li>No additional secrets are required for basic usage</li> <li>Ensure sensitive information is not exposed in documentation</li> </ul>"},{"location":"workflows/mkdocs-gh-pages/#contributing","title":"Contributing","text":"<p>Found a bug or have a suggestion? Please open an issue in the deepworks-net/github.actions repository.</p>"},{"location":"workflows/prepare-release/","title":"Prepare Release Workflow","text":"<p>This page documents the Prepare Release workflow located in the .github/workflows/prepare-release.yml file. This workflow automates the process of preparing a release branch and creating a pull request for review.</p>"},{"location":"workflows/prepare-release/#overview","title":"Overview","text":"<p>The Prepare Release workflow is triggered manually by tagging a commit with the tag: </p> <p><code>prep</code> </p> <p>It automates the following steps:</p> <ul> <li>Creates a release branch.</li> <li>Moves items from the \"Unreleased\" section of the changelog to a new versioned section.</li> <li>Removes the \"Unreleased\" section to finalize the changelog for release.</li> <li>Creates a pull request (PR) for the release branch.</li> </ul>"},{"location":"workflows/prepare-release/#trigger","title":"Trigger","text":"<p>To activate this workflow, push a tag with the prefix <code>prep-v</code>. For example:</p> <pre><code>git tag prep-v1.0.0\ngit push origin prep-v1.0.0\n</code></pre>"},{"location":"workflows/prepare-release/#workflow-steps","title":"Workflow Steps","text":""},{"location":"workflows/prepare-release/#1-check-out-repository","title":"1. Check Out Repository","text":"<p>The workflow checks out the repository code to the GitHub Actions runner to perform modifications.</p>"},{"location":"workflows/prepare-release/#2-create-release-branch","title":"2. Create Release Branch","text":"<p>A new branch named <code>release/{version}</code> is created. The version is extracted from the tag name (e.g., <code>prep-v1.0.0</code> creates <code>release/1.0.0</code>).</p>"},{"location":"workflows/prepare-release/#3-update-changelog","title":"3. Update Changelog","text":"<p>The workflow:</p> <ul> <li>Moves all changelog items under the \"Unreleased\" section to a new version section (e.g., <code>## [1.0.0]</code>).</li> <li>Adds a date to the new section (based on the workflow run date).</li> <li>Removes the \"Unreleased\" section.</li> </ul>"},{"location":"workflows/prepare-release/#4-commit-changes","title":"4. Commit Changes","text":"<p>Commits the updated changelog to the new release branch with a message like:</p> <pre><code>chore: prepare release 1.0.0\n</code></pre>"},{"location":"workflows/prepare-release/#5-create-pull-request","title":"5. Create Pull Request","text":"<p>Creates a PR from the release branch to the <code>main</code> branch. The PR title includes the version, such as:</p> <p>makefile</p> <p>Copy code</p> <p><code>Release: 1.0.0</code></p>"},{"location":"workflows/prepare-release/#requirements","title":"Requirements","text":""},{"location":"workflows/prepare-release/#repository-setup","title":"Repository Setup","text":"<ol> <li>A <code>develop</code> branch is required for ongoing development.</li> <li>A <code>Changelog.md</code> file must exist in the repository root. If not present, the workflow will create one.</li> </ol>"},{"location":"workflows/prepare-release/#permissions","title":"Permissions","text":"<ul> <li>Write access to create branches and push changes.</li> <li>Access to create and manage PRs.</li> </ul>"},{"location":"workflows/prepare-release/#usage-example","title":"Usage Example","text":"<ol> <li>Ensure your changelog has an \"Unreleased\" section with pending changes.</li> <li>Tag the repository with a release preparation version:</li> </ol> <p>bash</p> <p>Copy code</p> <p><code>git tag prep-v2.1.0 git push origin prep-v2.1.0</code></p> <ol> <li>The workflow will:<ul> <li>Create the branch <code>release/2.1.0</code>.</li> <li>Update the changelog.</li> <li>Open a PR for review and approval.</li> </ul> </li> </ol>"},{"location":"workflows/prepare-release/#outputs","title":"Outputs","text":"<ul> <li>Release Branch: <code>release/{version}</code> (e.g., <code>release/2.1.0</code>).</li> <li>Updated Changelog: Moves changes to the new version section with a date.</li> <li>Pull Request: A PR for merging the release branch into <code>main</code>.</li> </ul>"},{"location":"workflows/prepare-release/#notes","title":"Notes","text":"<ul> <li>If the changelog format deviates from the expected structure, the workflow may fail.</li> <li>Manual edits to the changelog after workflow execution are discouraged to maintain consistency.</li> </ul>"},{"location":"workflows/prepare-release/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workflows/prepare-release/#workflow-fails","title":"Workflow Fails","text":"<ol> <li>Check the workflow logs for details.</li> <li>Verify the tag format (<code>prep-v{version}</code>) and changelog structure.</li> </ol>"},{"location":"workflows/prepare-release/#missing-changelog","title":"Missing Changelog","text":"<p>If the <code>Changelog.md</code> file is missing, the workflow will create one with a default template.</p>"},{"location":"workflows/prepare-release/#contributing","title":"Contributing","text":"<p>For improvements or fixes to this workflow, follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a branch from <code>develop</code>.</li> <li>Submit a PR with a detailed description of your changes.</li> </ol>"},{"location":"workflows/prepare-release/#license","title":"License","text":"<p>This workflow is part of the Deepworks project and is licensed under the MIT License.</p> <p>For more details, visit the repository: deepworks-net/github.actions</p>"},{"location":"workflows/release-drafter/","title":"Release Drafter Workflow","text":"<p>This workflow automates the creation and management of GitHub Releases. It maintains a draft release that updates automatically with new changes. It also allows other workflows to trigger release operations via a workflow call.</p>"},{"location":"workflows/release-drafter/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/release-drafter.yml</code></p>"},{"location":"workflows/release-drafter/#triggers","title":"Triggers","text":"<p>The workflow responds to two types of events:</p> <ol> <li> <p>Push to the <code>develop</code> branch:</p> <ul> <li>Updates the draft release.</li> <li>Calculates the next version using a centralized version calculation.</li> <li>Updates release notes dynamically.</li> </ul> </li> <li> <p>Workflow call:</p> <ul> <li>Allows other workflows to trigger release operations.</li> <li>Supports custom tag names and options.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#version-calculation","title":"Version Calculation","text":"<p>The workflow calculates the next version number using the version_calculation Action, based on:</p> <ul> <li>The latest version tag (<code>vX.Y.Z</code> format).</li> <li>The number of commits since the last tag. This ensures consistent and centralized versioning logic across workflows.</li> </ul> <p>Example:</p> <ul> <li>Latest version: <code>v1.0.16</code></li> <li>3 new commits.</li> <li>Next calculated version: <code>v1.0.19</code>.</li> </ul>"},{"location":"workflows/release-drafter/#jobs","title":"Jobs","text":""},{"location":"workflows/release-drafter/#1-update-release-draft","title":"1. Update Release Draft","text":"<p>Triggered when changes are pushed to the <code>develop</code> branch:</p> <pre><code>jobs:\n  update_release_draft:\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n</code></pre> <p>Steps:</p> <ol> <li>Checkout Repository:<ul> <li>Ensures the <code>develop</code> branch is checked out.</li> <li>Fetches the full Git history for accurate version calculations.</li> </ul> </li> <li>Debugging Steps:<ul> <li>Confirms the repository structure and Action files are present.</li> </ul> </li> <li>Calculate Next Version:<ul> <li>Uses the centralized <code>version_calculation</code> Action.</li> </ul> </li> <li>Set Output for Version:<ul> <li>Saves the calculated version as a workflow output for future steps.</li> </ul> </li> <li>Draft Release:<ul> <li>Updates the draft release with the calculated version and release notes.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#2-publish-release-conditional","title":"2. Publish Release (Conditional)","text":"<p>This job is configured to publish a final release if the workflow is triggered with a <code>refs/tags/v*</code> reference. It is conditional on such an event being passed to the workflow:</p> <pre><code>jobs:\n  publish_release:\n    runs-on: ubuntu-latest\n    if: startsWith(github.ref, 'refs/tags/v')\n</code></pre> <p>Steps:</p> <ol> <li>Checkout Repository:<ul> <li>Ensures the correct repository and tag are available.</li> </ul> </li> <li>Publish Final Release:<ul> <li>Publishes the release using the <code>release-drafter/release-drafter@v6</code> Action.</li> <li>Uses the provided tag to finalize release notes.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#input-parameters","title":"Input Parameters","text":"Parameter Description Required Default <code>tag-name</code> Release tag name No Current tag <code>draft</code> Create as draft No <code>false</code>"},{"location":"workflows/release-drafter/#secrets","title":"Secrets","text":"Secret Description Required Default <code>token</code> GitHub token No <code>GITHUB_TOKEN</code>"},{"location":"workflows/release-drafter/#release-format","title":"Release Format","text":""},{"location":"workflows/release-drafter/#draft-release","title":"Draft Release","text":"<pre><code>## Draft Release v1.0.X\n\n[Automatically populated release notes]\n\nSee the [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for more details.\n</code></pre>"},{"location":"workflows/release-drafter/#integration","title":"Integration","text":"<p>This workflow integrates with:</p> <ul> <li>Centralized version calculation logic.</li> <li>Draft release management.</li> <li>Optional release publishing.</li> </ul>"},{"location":"workflows/release-drafter/#permissions","title":"Permissions","text":"<p>Required permissions:</p> <pre><code>permissions:\n  contents: write\n</code></pre>"},{"location":"workflows/release-drafter/#usage-examples","title":"Usage Examples","text":""},{"location":"workflows/release-drafter/#as-part-of-release-process","title":"As Part of Release Process","text":"<ol> <li>Push changes to the <code>develop</code> branch:<ul> <li>Updates the draft release.</li> <li>Dynamically calculates the next version.</li> <li>Updates release notes.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#called-from-another-workflow","title":"Called from Another Workflow","text":"<pre><code>jobs:\n  release:\n    uses: deepworks-net/github.actions/.github/workflows/release-drafter.yml@main\n    with:\n      tag-name: 'v1.0.0'\n      draft: true\n</code></pre>"},{"location":"workflows/release-drafter/#troubleshooting","title":"Troubleshooting","text":""},{"location":"workflows/release-drafter/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ol> <li> <p>Version Calculation Fails:</p> <ul> <li>Ensure the repository has at least one version tag.</li> <li>Verify the <code>version_calculation</code> Action is properly configured.</li> </ul> </li> <li> <p>Draft Not Updating:</p> <ul> <li>Ensure the branch name matches <code>develop</code>.</li> <li>Verify the workflow has write permissions.</li> <li>Check the release-drafter configuration.</li> </ul> </li> </ol>"},{"location":"workflows/release-drafter/#related-documentation","title":"Related Documentation","text":"<ul> <li>release-drafter action</li> <li>Semantic Versioning</li> <li>GitHub Releases</li> </ul>"},{"location":"workflows/update-changelog/","title":"Update Changelog Workflow","text":"<p>This workflow automatically updates the repository's CHANGELOG.md file when pull requests are merged into the develop branch.</p>"},{"location":"workflows/update-changelog/#workflow-file","title":"Workflow File","text":"<p><code>.github/workflows/update-changelog.yml</code></p>"},{"location":"workflows/update-changelog/#trigger","title":"Trigger","text":"<p>The workflow is triggered when a pull request targeting the <code>develop</code> branch is closed:</p> <pre><code>on:\n  pull_request:\n    branches:\n      - develop\n    types: [closed]\n</code></pre> <p>The workflow will only run if the pull request was actually merged, not just closed:</p> <pre><code>jobs:\n  update-changelog:\n    if: github.event.pull_request.merged == true\n</code></pre>"},{"location":"workflows/update-changelog/#changelog-format","title":"Changelog Format","text":"<p>The workflow expects and maintains a changelog in the following format:</p> <pre><code>## **MM/DD/YYYY - Unreleased**\n- PR #123: Description of change\n- PR #124: Another change\n\n## **MM/DD/YYYY - v1.0.0**\n- Previous release changes...\n</code></pre>"},{"location":"workflows/update-changelog/#process","title":"Process","text":"<p>The workflow performs the following steps:</p> <ol> <li>Checks out the repository's develop branch</li> <li>Processes the CHANGELOG.md file:<ul> <li>If an \"Unreleased\" section exists, adds the new PR entry to it</li> <li>If no \"Unreleased\" section exists, creates one with today's date</li> </ul> </li> <li>Commits and pushes the updated changelog</li> </ol>"},{"location":"workflows/update-changelog/#entry-format","title":"Entry Format","text":"<p>Each changelog entry follows the format:</p> <pre><code>- PR #{number}: {pull request title}\n</code></pre>"},{"location":"workflows/update-changelog/#usage","title":"Usage","text":"<p>The workflow runs automatically when PRs are merged. No manual intervention is required.</p>"},{"location":"workflows/update-changelog/#prerequisites","title":"Prerequisites","text":"<ol> <li>Repository must have a <code>CHANGELOG.md</code> file in the root directory</li> <li>The file should follow the expected format</li> <li>PRs should be merged into the <code>develop</code> branch</li> </ol>"},{"location":"workflows/update-changelog/#pull-request-requirements","title":"Pull Request Requirements","text":"<ul> <li>PRs must target the <code>develop</code> branch</li> <li>PR title should be descriptive as it will be used in the changelog</li> <li>PR must be merged (not just closed)</li> </ul>"},{"location":"workflows/update-changelog/#examples","title":"Examples","text":""},{"location":"workflows/update-changelog/#pr-title-examples","title":"PR Title Examples","text":"<p>Good PR titles that make meaningful changelog entries:</p> <pre><code>Add user authentication system\nFix memory leak in data processing\nUpdate dependencies to latest versions\n</code></pre> <p>Poor PR titles to avoid:</p> <pre><code>Fix bug\nUpdate code\nWIP: Changes\n</code></pre>"},{"location":"workflows/update-changelog/#changelog-entry-examples","title":"Changelog Entry Examples","text":"<p>The workflow will create entries like:</p> <pre><code>## **01/02/2025 - Unreleased**\n- PR #123: Add user authentication system\n- PR #124: Fix memory leak in data processing\n- PR #125: Update dependencies to latest versions\n</code></pre>"},{"location":"workflows/update-changelog/#permissions","title":"Permissions","text":"<p>The workflow requires:</p> <ul> <li>Read access to pull request metadata</li> <li>Write access to the repository (for pushing changes)</li> </ul> <p>It uses the <code>GITHUB_TOKEN</code> secret which is automatically provided by GitHub Actions.</p>"},{"location":"workflows/update-changelog/#error-handling","title":"Error Handling","text":"<p>The workflow includes several safeguards:</p> <ol> <li>Only runs on merged PRs</li> <li>Creates \"Unreleased\" section if missing</li> <li>Checks for changes before committing</li> <li>Uses [skip ci] in commit message to prevent CI loops</li> </ol>"},{"location":"workflows/update-changelog/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li> <p>Changelog Not Updated</p> <ul> <li>Verify PR was actually merged</li> <li>Check if PR targeted develop branch</li> <li>Verify CHANGELOG.md exists in root directory</li> </ul> </li> <li> <p>Push Failed</p> <ul> <li>Check if workflow has write permissions</li> <li>Verify branch protections allow GitHub Actions to push</li> </ul> </li> <li> <p>Format Issues</p> <ul> <li>Ensure CHANGELOG.md follows expected format</li> <li>Check for manual modifications that might break format</li> </ul> </li> </ol>"},{"location":"workflows/update-changelog/#contributing","title":"Contributing","text":"<p>To modify this workflow:</p> <ol> <li>Fork the repository</li> <li>Edit <code>.github/workflows/update-changelog.yml</code></li> <li>Test changes by merging PRs to your fork</li> <li>Submit a pull request</li> </ol>"},{"location":"workflows/update-changelog/#related-documentation","title":"Related Documentation","text":"<ul> <li>GitHub Actions documentation</li> <li>Keep a Changelog</li> <li>Git documentation</li> </ul>"},{"location":"workflows/core/version_calculator/","title":"Version Calculator Workflow","text":""},{"location":"workflows/core/version_calculator/#overview","title":"Overview","text":"<p>The Version Calculator workflow provides a reusable workflow for calculating version numbers based on Git tags and commit history. It wraps the Version Calculator core action for easy integration into external repositories.</p>"},{"location":"workflows/core/version_calculator/#usage","title":"Usage","text":"<pre><code>name: Calculate Version\n\non:\n  workflow_dispatch:  # Manual trigger\n  push:              # Auto trigger\n\njobs:\n  get-version:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n    with:\n      default_version: \"v0.1.0\"  # Optional\n      version_prefix: \"v\"        # Optional\n      tag_pattern: \"v*\"         # Optional\n</code></pre>"},{"location":"workflows/core/version_calculator/#inputs","title":"Inputs","text":""},{"location":"workflows/core/version_calculator/#default_version-optional","title":"<code>default_version</code> (Optional)","text":"<ul> <li>Description: Default version to use when no tags exist</li> <li>Type: String</li> <li>Default: <code>v0.1.0</code></li> <li>Note: Must match format <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> </ul>"},{"location":"workflows/core/version_calculator/#version_prefix-optional","title":"<code>version_prefix</code> (Optional)","text":"<ul> <li>Description: Prefix for version tags</li> <li>Type: String</li> <li>Default: <code>v</code></li> <li>Example: <code>'v'</code> for v1.0.0 or <code>'ver'</code> for ver1.0.0</li> </ul>"},{"location":"workflows/core/version_calculator/#tag_pattern-optional","title":"<code>tag_pattern</code> (Optional)","text":"<ul> <li>Description: Pattern to match version tags</li> <li>Type: String</li> <li>Default: <code>v*</code></li> <li>Note: Should align with version_prefix</li> </ul>"},{"location":"workflows/core/version_calculator/#outputs","title":"Outputs","text":""},{"location":"workflows/core/version_calculator/#next_version","title":"<code>next_version</code>","text":"<ul> <li>Description: The calculated next version</li> <li>Type: String</li> <li>Format: <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> </ul>"},{"location":"workflows/core/version_calculator/#current_version","title":"<code>current_version</code>","text":"<ul> <li>Description: Current version (latest tag or default)</li> <li>Type: String</li> <li>Format: <code>{prefix}\\d+\\.\\d+\\.\\d+</code></li> </ul>"},{"location":"workflows/core/version_calculator/#commit_count","title":"<code>commit_count</code>","text":"<ul> <li>Description: Number of commits since current version</li> <li>Type: Number</li> <li>Note: Returns 0 when using default_version</li> </ul>"},{"location":"workflows/core/version_calculator/#behavior","title":"Behavior","text":""},{"location":"workflows/core/version_calculator/#initial-run-no-tags","title":"Initial Run (No Tags)","text":"<pre><code>Inputs:\n  default_version: \"v0.1.0\"\n  version_prefix: \"v\"\n  tag_pattern: \"v*\"\n\nOutputs:\n  current_version: \"v0.1.0\"\n  next_version: \"v0.1.0\"\n  commit_count: 0\n</code></pre>"},{"location":"workflows/core/version_calculator/#with-existing-tag","title":"With Existing Tag","text":"<pre><code># Repository state:\n# - Latest tag: v1.0.0\n# - 2 new commits\n\nOutputs:\n  current_version: \"v1.0.0\"\n  next_version: \"v1.0.2\"\n  commit_count: 2\n</code></pre>"},{"location":"workflows/core/version_calculator/#custom-prefix","title":"Custom Prefix","text":"<pre><code>Inputs:\n  default_version: \"ver0.1.0\"\n  version_prefix: \"ver\"\n  tag_pattern: \"ver*\"\n\n# Repository state:\n# - Latest tag: ver1.0.0\n# - 1 new commit\n\nOutputs:\n  current_version: \"ver1.0.0\"\n  next_version: \"ver1.0.1\"\n  commit_count: 1\n</code></pre>"},{"location":"workflows/core/version_calculator/#example-implementations","title":"Example Implementations","text":""},{"location":"workflows/core/version_calculator/#basic-usage","title":"Basic Usage","text":"<pre><code>jobs:\n  version:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n\n  build:\n    needs: version\n    steps:\n      - name: Use Version\n        run: |\n          echo \"Next version: ${{ needs.version.outputs.next_version }}\"\n          echo \"Current version: ${{ needs.version.outputs.current_version }}\"\n          echo \"Commit count: ${{ needs.version.outputs.commit_count }}\"\n</code></pre>"},{"location":"workflows/core/version_calculator/#custom-versioning","title":"Custom Versioning","text":"<pre><code>jobs:\n  version:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_calculator.yml@v1\n    with:\n      default_version: \"ver0.1.0\"\n      version_prefix: \"ver\"\n      tag_pattern: \"ver*\"\n</code></pre>"},{"location":"workflows/core/version_calculator/#error-handling","title":"Error Handling","text":"<p>The workflow handles errors from the core action:</p> <ol> <li> <p>Input Validation</p> <ul> <li>Invalid version format</li> <li>Mismatched prefix/default_version</li> <li>Invalid patterns</li> </ul> </li> <li> <p>Git Operations</p> <ul> <li>Repository access issues</li> <li>Tag retrieval failures</li> <li>Configuration problems</li> </ul> </li> <li> <p>Version Calculation</p> <ul> <li>Invalid tag formats</li> <li>Counting errors</li> <li>Pattern matching failures</li> </ul> </li> </ol>"},{"location":"workflows/core/version_updater/","title":"Version Updater Workflow","text":""},{"location":"workflows/core/version_updater/#overview","title":"Overview","text":"<p>The Version Updater workflow provides a reusable workflow for updating version numbers across multiple files in a repository. It wraps the Version Updater core action, ensuring consistent version updates across different file types.</p>"},{"location":"workflows/core/version_updater/#usage","title":"Usage","text":"<pre><code>jobs:\n  update:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: 'v2.0.0'\n      files: |\n        \"README.md\"\n        \"package.json\"\n      strip_v_prefix: true\n</code></pre>"},{"location":"workflows/core/version_updater/#inputs","title":"Inputs","text":""},{"location":"workflows/core/version_updater/#version","title":"<code>version</code>","text":"<ul> <li>Description: Version number to set</li> <li>Required: Yes</li> <li>Format: <code>v1.2.3</code> or <code>1.2.3</code></li> <li>Example: <code>'v2.0.0'</code></li> </ul>"},{"location":"workflows/core/version_updater/#files","title":"<code>files</code>","text":"<ul> <li>Description: Files to update</li> <li>Required: Yes</li> <li>Format: Multi-line string, one file per line</li> <li>Example:</li> </ul> <pre><code>files: |\n  \"package.json\"\n  \"version.yml\"\n</code></pre>"},{"location":"workflows/core/version_updater/#strip_v_prefix","title":"<code>strip_v_prefix</code>","text":"<ul> <li>Description: Remove 'v' prefix when updating files</li> <li>Required: No</li> <li>Default: <code>true</code></li> <li>Type: boolean</li> </ul>"},{"location":"workflows/core/version_updater/#outputs","title":"Outputs","text":""},{"location":"workflows/core/version_updater/#files_1","title":"<code>files</code>","text":"<ul> <li>Description: JSON array of successfully updated files</li> <li>Type: String (JSON array)</li> <li>Example: <code>'[\"package.json\", \"version.yml\"]'</code></li> </ul>"},{"location":"workflows/core/version_updater/#examples","title":"Examples","text":""},{"location":"workflows/core/version_updater/#basic-usage","title":"Basic Usage","text":"<pre><code>name: Update Version\n\non:\n  workflow_dispatch:\n    inputs:\n      version:\n        description: 'New version'\n        required: true\n        type: string\n\njobs:\n  update:\n    uses: deepworks-net/github.toolkit/.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: ${{ inputs.version }}\n      files: |\n        \"package.json\"\n        \"version.yml\"\n</code></pre>"},{"location":"workflows/core/version_updater/#integration-with-version-calculator","title":"Integration with Version Calculator","text":"<pre><code>name: Release Version Update\n\njobs:\n  calculate:\n    uses: ./.github/workflows/core.action.version_calculator.yml@v1\n\n  update:\n    needs: calculate\n    uses: ./.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: ${{ needs.calculate.outputs.next_version }}\n      files: |\n        \"package.json\"\n        \"version.yml\"\n</code></pre>"},{"location":"workflows/core/version_updater/#keep-version-prefix","title":"Keep Version Prefix","text":"<pre><code>jobs:\n  update:\n    uses: ./.github/workflows/core.action.version_updater.yml@v1\n    with:\n      version: 'v2.0.0'\n      files: |\n        \"config.yml\"\n      strip_v_prefix: false\n</code></pre>"},{"location":"workflows/core/version_updater/#error-handling","title":"Error Handling","text":"<p>The workflow handles several error cases:</p> <ol> <li> <p>Input Validation</p> <ul> <li>Invalid version format</li> <li>Empty files list</li> <li>Invalid file paths</li> </ul> </li> <li> <p>File Operations</p> <ul> <li>Missing files</li> <li>Permission issues</li> <li>Invalid file formats</li> </ul> </li> <li> <p>Version Updates</p> <ul> <li>No version fields found</li> <li>Update failures</li> </ul> </li> </ol>"},{"location":"workflows/core/version_updater/#error-outputs","title":"Error Outputs","text":"<ul> <li>Failed updates result in empty file array</li> <li>Exit code 1 indicates failures</li> <li>Detailed error messages in logs</li> </ul>"},{"location":"workflows/core/version_updater/#behavior-matrix","title":"Behavior Matrix","text":""},{"location":"workflows/core/version_updater/#all-files-updated","title":"All Files Updated","text":"<pre><code># Input\nversion: 'v2.0.0'\nfiles: |\n  \"file1.yml\"\n  \"file2.json\"\n\n# Output\nfiles: '[\"file1.yml\", \"file2.json\"]'\nexit_code: 0\n</code></pre>"},{"location":"workflows/core/version_updater/#partial-update","title":"Partial Update","text":"<pre><code># Input\nversion: 'v2.0.0'\nfiles: |\n  \"exists.json\"\n  \"missing.yml\"\n\n# Output\nfiles: '[\"exists.json\"]'\nexit_code: 1\n</code></pre>"},{"location":"workflows/core/version_updater/#no-files-updated","title":"No Files Updated","text":"<pre><code># Input\nversion: 'v2.0.0'\nfiles: |\n  \"missing.json\"\n\n# Output\nfiles: '[]'\nexit_code: 1\n</code></pre>"},{"location":"workflows/core/version_updater/#implementation-details","title":"Implementation Details","text":"<ol> <li> <p>Checkout</p> <ul> <li>Fetches repository content</li> <li>No depth limitation</li> <li>Main branch checkout</li> </ul> </li> <li> <p>Version Update</p> <ul> <li>Preserves file formatting</li> <li>Maintains file structure</li> <li>Handles multiple file types</li> </ul> </li> <li> <p>Output Handling</p> <ul> <li>JSON array format</li> <li>Consistent error reporting</li> <li>Clear success/failure indication</li> </ul> </li> </ol>"}]}