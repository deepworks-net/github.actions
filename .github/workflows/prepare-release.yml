name: Prepare Release Branch
on:
  push:
    tags:
      - 'prep'  # Simple trigger

jobs:
  create-release-branch:
    if: github.ref_type == 'tag' && github.ref == 'refs/tags/prep'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          
      - name: Calculate Version and Create Release Branch
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git tag -l 'v*' --sort=-v:refname | head -n1)
          echo "Latest tag: $LATEST_TAG"
          
          # Parse the version numbers
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            # Count commits since last tag
            COMMIT_COUNT=$(git rev-list $LATEST_TAG..HEAD --count)
            
            # Calculate new patch version
            NEW_PATCH=$((PATCH + COMMIT_COUNT))
            
            # Format new version
            VERSION="v$MAJOR.$MINOR.$NEW_PATCH"
            echo "Calculated version: $VERSION"
          else
            echo "Could not parse version from tag: $LATEST_TAG"
            exit 1
          fi

          RELEASE_BRANCH="release/${VERSION}"
          TODAY=$(date +"%m/%d/%Y")
          ORG="${{ github.repository_owner }}"
          PROJ="${{ github.event.repository.name }}"
          
          echo "Creating release branch: $RELEASE_BRANCH"
          
          git checkout -b "$RELEASE_BRANCH"
          
          # Create temp file
          TEMP_FILE=$(mktemp)
          
          # Check if version already exists
          if grep -q "$VERSION" CHANGELOG.md; then
            echo "Error: Version $VERSION already exists in changelog"
            exit 1
          fi
          
          # Get PRs since last tag
          echo "Getting PRs since $LATEST_TAG..."
          PR_LIST=$(git log $LATEST_TAG..HEAD --pretty=format:"%s" | \
            grep -oE "PR #[0-9]+:.*$" | \
            sort -u | \
            while read pr; do
              echo "- $pr"
            done)
          
          # Process the changelog
          awk -v version="$VERSION" -v today="$TODAY" -v org="$ORG" -v proj="$PROJ" -v pr_list="$PR_LIST" '
            BEGIN {
              found_first_section = 0
              made_changes = 0
            }
            
            # Print header lines before first section
            !found_first_section && !/^## / {
              print
              next
            }
            
            # Handle start of any section
            /^## / {
              if (!found_first_section) {
                # Insert our new version section before first existing section
                print "## **[(" today ") - " version ")](https://github.com/" org "/" proj "/releases/tag/" version ")**"
                print pr_list
                print ""
                made_changes = 1
                found_first_section = 1
              }
              print
              next
            }
            
            # Print everything else as is
            { print }
            
            END {
              if (!found_first_section) {
                # If no sections found, add ours at the end
                if (NR > 0) print ""
                print "## **[(" today ") - " version ")](https://github.com/" org "/" proj "/releases/tag/" version ")**"
                print pr_list
                made_changes = 1
              }
              exit !made_changes
            }
          ' CHANGELOG.md > "$TEMP_FILE"
          
          # Always update if awk indicated changes were made
          if [ $? -eq 0 ]; then
            cat "$TEMP_FILE" > CHANGELOG.md
            
            # Commit changes
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add CHANGELOG.md
            git commit -m "chore: Prepare changelog for $VERSION release"
            
            # Push release branch
            git push origin "$RELEASE_BRANCH"
            
            # Delete the prep tag as it's no longer needed
            git push origin :refs/tags/prep
            
            # Create PR for release branch
            gh pr create \
              --title "Release $VERSION" \
              --body "## Release Preparation

              ### Version Information
              - Calculated Version: $VERSION
              - Based on: $LATEST_TAG
              - Commits Since Last Release: $COMMIT_COUNT
              
              ### Changelog Updates
              - Added version $VERSION section with PRs since last release
              
              ### Next Steps
              1. Review the changelog
              2. Merge this PR to develop
              3. Final release will be created automatically" \
              --base develop \
              --head "$RELEASE_BRANCH"
          else
            echo "Failed to update CHANGELOG.md"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}