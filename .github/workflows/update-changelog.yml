name: Update Changelog
on:
  pull_request:
    branches:
      - staging  # Updated to new naming convention
    types: [closed]

jobs:
  update_changelog:
    # Only run if the PR was merged (not just closed)
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}  # Ensures the current repository
          ref: staging    # Updated to new naming convention
          fetch-depth: 0

      - name: Calculate Next Version
        uses: ./actions/version_calculation
        id: version
          
      - name: Update Changelog
        run: |
          TODAY=$(date +"%m/%d/%Y")
          VERSION="${{ steps.version.outputs.next_version }}"
          
          # Fetch draft release content
          echo "Fetching draft release content..."
          RELEASE_CONTENT=$(gh api \
            -H "Accept: application/vnd.github+json" \
            repos/${{ github.repository_owner }}/${{ github.repository }}/releases \
            --jq '.[] | select(.draft == true) | .body' | \
            sed -n '/^-/p' | \
            sed 's/See the.*$//')
          
          if [ -z "$RELEASE_CONTENT" ]; then
            echo "Warning: No content found in draft release"
            exit 1
          fi
          
          TEMP_FILE=$(mktemp)
          
          awk -v today="$TODAY" -v version="$VERSION" -v release_content="$RELEASE_CONTENT" '
            BEGIN {
              found_unreleased = 0
            }
            
            # Keep header content
            !found_unreleased && !/^## / {
              print
              next
            }
            
            # Handle unreleased section or create new one
            /^## \*\*.*[Uu]nreleased\*\*/ {
              found_unreleased = 1
              print "## **" today " - " version " Unreleased**"
              print release_content
              next
            }
            
            # When we hit the next section
            /^## \*\*\[/ {
              if (!found_unreleased) {
                print "## **" today " - " version " Unreleased**"
                print release_content
                print ""
                found_unreleased = 1
              }
              print
              next
            }
            
            # Print everything else
            { print }
            
            END {
              if (!found_unreleased) {
                if (NR > 0) print ""
                print "## **" today " - " version " Unreleased**"
                print release_content
              }
            }
          ' CHANGELOG.md > "$TEMP_FILE"
          
          cat "$TEMP_FILE" > CHANGELOG.md

      - name: Commit and Push Changes
        run: |
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md with PR #${{ github.event.pull_request.number }} [skip ci]"
          git push origin staging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}